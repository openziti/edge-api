// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package o_id_c_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new o id c authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for o id c authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AuthenticateCert(params *AuthenticateCertParams, opts ...ClientOption) (*AuthenticateCertOK, error)

	AuthenticateExtJWT(params *AuthenticateExtJWTParams, opts ...ClientOption) (*AuthenticateExtJWTOK, error)

	AuthenticatePassword(params *AuthenticatePasswordParams, opts ...ClientOption) (*AuthenticatePasswordOK, error)

	AuthenticateUsername(params *AuthenticateUsernameParams, opts ...ClientOption) (*AuthenticateUsernameOK, error)

	CompleteTotpEnrollment(params *CompleteTotpEnrollmentParams, opts ...ClientOption) (*CompleteTotpEnrollmentOK, error)

	DeleteTotpEnrollment(params *DeleteTotpEnrollmentParams, opts ...ClientOption) (*DeleteTotpEnrollmentOK, error)

	ListAuthQueries(params *ListAuthQueriesParams, opts ...ClientOption) (*ListAuthQueriesOK, error)

	ShowCertAuth(params *ShowCertAuthParams, opts ...ClientOption) (*ShowCertAuthOK, error)

	ShowExtJWTAuth(params *ShowExtJWTAuthParams, opts ...ClientOption) (*ShowExtJWTAuthOK, error)

	ShowPasswordLogin(params *ShowPasswordLoginParams, opts ...ClientOption) (*ShowPasswordLoginOK, error)

	ShowUsernameLogin(params *ShowUsernameLoginParams, opts ...ClientOption) (*ShowUsernameLoginOK, error)

	StartTotpEnrollment(params *StartTotpEnrollmentParams, opts ...ClientOption) (*StartTotpEnrollmentCreated, error)

	VerifyTotp(params *VerifyTotpParams, opts ...ClientOption) (*VerifyTotpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AuthenticateCert authenticates with client certificate

  Authenticates a user via client certificate for OIDC flow
*/
func (a *Client) AuthenticateCert(params *AuthenticateCertParams, opts ...ClientOption) (*AuthenticateCertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateCertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authenticateCert",
		Method:             "POST",
		PathPattern:        "/cert",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateCertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateCertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authenticateCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthenticateExtJWT authenticates with external JWT

  Authenticates a user via external JWT for OIDC flow
*/
func (a *Client) AuthenticateExtJWT(params *AuthenticateExtJWTParams, opts ...ClientOption) (*AuthenticateExtJWTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateExtJWTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authenticateExtJwt",
		Method:             "POST",
		PathPattern:        "/ext-jwt",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateExtJWTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateExtJWTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authenticateExtJwt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthenticatePassword authenticates with username and password

  Authenticates a user via username/password for OIDC flow
*/
func (a *Client) AuthenticatePassword(params *AuthenticatePasswordParams, opts ...ClientOption) (*AuthenticatePasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticatePasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authenticatePassword",
		Method:             "POST",
		PathPattern:        "/password",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticatePasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticatePasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authenticatePassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuthenticateUsername authenticates with username

  Authenticates a user via username for OIDC flow (alias for password auth)
*/
func (a *Client) AuthenticateUsername(params *AuthenticateUsernameParams, opts ...ClientOption) (*AuthenticateUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthenticateUsernameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "authenticateUsername",
		Method:             "POST",
		PathPattern:        "/username",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AuthenticateUsernameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthenticateUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authenticateUsername: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompleteTotpEnrollment completes t o t p enrollment

  Completes TOTP enrollment by verifying the enrollment code
*/
func (a *Client) CompleteTotpEnrollment(params *CompleteTotpEnrollmentParams, opts ...ClientOption) (*CompleteTotpEnrollmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteTotpEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "completeTotpEnrollment",
		Method:             "POST",
		PathPattern:        "/totp/enroll/verify",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CompleteTotpEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompleteTotpEnrollmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for completeTotpEnrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTotpEnrollment cancels t o t p enrollment

  Cancels an ongoing TOTP enrollment
*/
func (a *Client) DeleteTotpEnrollment(params *DeleteTotpEnrollmentParams, opts ...ClientOption) (*DeleteTotpEnrollmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTotpEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTotpEnrollment",
		Method:             "DELETE",
		PathPattern:        "/totp/enroll",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTotpEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTotpEnrollmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTotpEnrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAuthQueries lists authentication queries

  Returns authentication queries for the specified auth request ID
*/
func (a *Client) ListAuthQueries(params *ListAuthQueriesParams, opts ...ClientOption) (*ListAuthQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAuthQueries",
		Method:             "GET",
		PathPattern:        "/auth-queries",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuthQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAuthQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowCertAuth certificates authentication endpoint

  Handles certificate-based authentication for OIDC flow
*/
func (a *Client) ShowCertAuth(params *ShowCertAuthParams, opts ...ClientOption) (*ShowCertAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowCertAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showCertAuth",
		Method:             "GET",
		PathPattern:        "/cert",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowCertAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowCertAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showCertAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowExtJWTAuth externals JWT authentication endpoint

  Handles external JWT-based authentication for OIDC flow
*/
func (a *Client) ShowExtJWTAuth(params *ShowExtJWTAuthParams, opts ...ClientOption) (*ShowExtJWTAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowExtJWTAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showExtJwtAuth",
		Method:             "GET",
		PathPattern:        "/ext-jwt",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowExtJWTAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowExtJWTAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showExtJwtAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowPasswordLogin displays password authentication form

  Shows the password authentication form for OIDC login
*/
func (a *Client) ShowPasswordLogin(params *ShowPasswordLoginParams, opts ...ClientOption) (*ShowPasswordLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowPasswordLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showPasswordLogin",
		Method:             "GET",
		PathPattern:        "/password",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowPasswordLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowPasswordLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showPasswordLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowUsernameLogin displays username authentication form

  Shows the username authentication form for OIDC login (alias for password)
*/
func (a *Client) ShowUsernameLogin(params *ShowUsernameLoginParams, opts ...ClientOption) (*ShowUsernameLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowUsernameLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showUsernameLogin",
		Method:             "GET",
		PathPattern:        "/username",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowUsernameLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowUsernameLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showUsernameLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartTotpEnrollment starts t o t p enrollment

  Initiates TOTP enrollment for the current authentication session
*/
func (a *Client) StartTotpEnrollment(params *StartTotpEnrollmentParams, opts ...ClientOption) (*StartTotpEnrollmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartTotpEnrollmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startTotpEnrollment",
		Method:             "POST",
		PathPattern:        "/totp/enroll",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartTotpEnrollmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartTotpEnrollmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startTotpEnrollment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VerifyTotp verifies t o t p code

  Verifies a TOTP code for OIDC authentication
*/
func (a *Client) VerifyTotp(params *VerifyTotpParams, opts ...ClientOption) (*VerifyTotpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyTotpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verifyTotp",
		Method:             "POST",
		PathPattern:        "/totp",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifyTotpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyTotpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyTotp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
