// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package o_id_c_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/edge-api/rest_model"
)

// ListAuthQueriesReader is a Reader for the ListAuthQueries structure.
type ListAuthQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAuthQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAuthQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAuthQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAuthQueriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListAuthQueriesOK creates a ListAuthQueriesOK with default headers values
func NewListAuthQueriesOK() *ListAuthQueriesOK {
	return &ListAuthQueriesOK{}
}

/* ListAuthQueriesOK describes a response with status code 200, with default header values.

A list of authentication queries
*/
type ListAuthQueriesOK struct {
	Payload *ListAuthQueriesOKBody
}

func (o *ListAuthQueriesOK) Error() string {
	return fmt.Sprintf("[GET /auth-queries][%d] listAuthQueriesOK  %+v", 200, o.Payload)
}
func (o *ListAuthQueriesOK) GetPayload() *ListAuthQueriesOKBody {
	return o.Payload
}

func (o *ListAuthQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAuthQueriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthQueriesBadRequest creates a ListAuthQueriesBadRequest with default headers values
func NewListAuthQueriesBadRequest() *ListAuthQueriesBadRequest {
	return &ListAuthQueriesBadRequest{}
}

/* ListAuthQueriesBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type ListAuthQueriesBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *ListAuthQueriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /auth-queries][%d] listAuthQueriesBadRequest  %+v", 400, o.Payload)
}
func (o *ListAuthQueriesBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *ListAuthQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAuthQueriesUnauthorized creates a ListAuthQueriesUnauthorized with default headers values
func NewListAuthQueriesUnauthorized() *ListAuthQueriesUnauthorized {
	return &ListAuthQueriesUnauthorized{}
}

/* ListAuthQueriesUnauthorized describes a response with status code 401, with default header values.

The authentication request could not be processed as the credentials are invalid
*/
type ListAuthQueriesUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *ListAuthQueriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /auth-queries][%d] listAuthQueriesUnauthorized  %+v", 401, o.Payload)
}
func (o *ListAuthQueriesUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *ListAuthQueriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListAuthQueriesOKBody list auth queries o k body
swagger:model ListAuthQueriesOKBody
*/
type ListAuthQueriesOKBody struct {

	// auth queries
	AuthQueries []*rest_model.AuthQueryDetail `json:"authQueries"`
}

// Validate validates this list auth queries o k body
func (o *ListAuthQueriesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAuthQueriesOKBody) validateAuthQueries(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthQueries) { // not required
		return nil
	}

	for i := 0; i < len(o.AuthQueries); i++ {
		if swag.IsZero(o.AuthQueries[i]) { // not required
			continue
		}

		if o.AuthQueries[i] != nil {
			if err := o.AuthQueries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAuthQueriesOK" + "." + "authQueries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAuthQueriesOK" + "." + "authQueries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list auth queries o k body based on the context it is used
func (o *ListAuthQueriesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAuthQueriesOKBody) contextValidateAuthQueries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AuthQueries); i++ {

		if o.AuthQueries[i] != nil {
			if err := o.AuthQueries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAuthQueriesOK" + "." + "authQueries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAuthQueriesOK" + "." + "authQueries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAuthQueriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAuthQueriesOKBody) UnmarshalBinary(b []byte) error {
	var res ListAuthQueriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
