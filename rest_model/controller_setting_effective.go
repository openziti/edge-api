// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ControllerSettingEffective controller setting effective
//
// swagger:model controllerSettingEffective
type ControllerSettingEffective struct {
	BaseEntity

	// effective
	Effective *ControllerSettings `json:"effective,omitempty"`

	// instance
	Instance *ControllerSettings `json:"instance,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ControllerSettingEffective) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseEntity
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseEntity = aO0

	// AO1
	var dataAO1 struct {
		Effective *ControllerSettings `json:"effective,omitempty"`

		Instance *ControllerSettings `json:"instance,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Effective = dataAO1.Effective

	m.Instance = dataAO1.Instance

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ControllerSettingEffective) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Effective *ControllerSettings `json:"effective,omitempty"`

		Instance *ControllerSettings `json:"instance,omitempty"`
	}

	dataAO1.Effective = m.Effective

	dataAO1.Instance = m.Instance

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this controller setting effective
func (m *ControllerSettingEffective) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffective(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerSettingEffective) validateEffective(formats strfmt.Registry) error {

	if swag.IsZero(m.Effective) { // not required
		return nil
	}

	if m.Effective != nil {
		if err := m.Effective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("effective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("effective")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerSettingEffective) validateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if m.Instance != nil {
		if err := m.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this controller setting effective based on the context it is used
func (m *ControllerSettingEffective) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseEntity
	if err := m.BaseEntity.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEffective(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ControllerSettingEffective) contextValidateEffective(ctx context.Context, formats strfmt.Registry) error {

	if m.Effective != nil {
		if err := m.Effective.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("effective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("effective")
			}
			return err
		}
	}

	return nil
}

func (m *ControllerSettingEffective) contextValidateInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.Instance != nil {
		if err := m.Instance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ControllerSettingEffective) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ControllerSettingEffective) UnmarshalBinary(b []byte) error {
	var res ControllerSettingEffective
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
