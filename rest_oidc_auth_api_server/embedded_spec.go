// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package rest_oidc_auth_api_server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json",
    "text/html"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "OpenZiti Edge OIDC Authentication API",
    "title": "Ziti Edge OIDC Auth",
    "contact": {
      "name": "OpenZiti",
      "url": "https://openziti.discourse.group",
      "email": "help@openziti.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.26.47"
  },
  "host": "demo.ziti.dev",
  "basePath": "/oidc/login",
  "paths": {
    "/auth-queries": {
      "get": {
        "security": [],
        "description": "Returns authentication queries for the specified auth request ID",
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "List authentication queries",
        "operationId": "listAuthQueries",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of authentication queries",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/cert": {
      "get": {
        "security": [],
        "description": "Handles certificate-based authentication for OIDC flow",
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Certificate authentication endpoint",
        "operationId": "showCertAuth",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication prompt",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via client certificate for OIDC flow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with client certificate",
        "operationId": "authenticateCert",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/ext-jwt": {
      "get": {
        "security": [],
        "description": "Handles external JWT-based authentication for OIDC flow",
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "External JWT authentication endpoint",
        "operationId": "showExtJwtAuth",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication prompt",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via external JWT for OIDC flow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with external JWT",
        "operationId": "authenticateExtJwt",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/password": {
      "get": {
        "security": [],
        "description": "Shows the password authentication form for OIDC login",
        "produces": [
          "text/html"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Display password authentication form",
        "operationId": "showPasswordLogin",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HTML login form",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via username/password for OIDC flow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with username and password",
        "operationId": "authenticatePassword",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/totp": {
      "post": {
        "security": [],
        "description": "Verifies a TOTP code for OIDC authentication",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Verify TOTP code",
        "operationId": "verifyTotp",
        "parameters": [
          {
            "name": "totpRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/totpRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP verification result (HTML response)",
            "schema": {
              "type": "string"
            }
          },
          "302": {
            "description": "Redirect to callback URL on successful verification",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/totp/enroll": {
      "post": {
        "security": [],
        "description": "Initiates TOTP enrollment for the current authentication session",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Start TOTP enrollment",
        "operationId": "startTotpEnrollment",
        "parameters": [
          {
            "name": "authRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRequestBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TOTP enrollment started successfully",
            "schema": {
              "$ref": "#/definitions/detailMfa"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [],
        "description": "Cancels an ongoing TOTP enrollment",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Cancel TOTP enrollment",
        "operationId": "deleteTotpEnrollment",
        "parameters": [
          {
            "name": "totpRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/totpRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP enrollment cancelled successfully",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/totp/enroll/verify": {
      "post": {
        "security": [],
        "description": "Completes TOTP enrollment by verifying the enrollment code",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Complete TOTP enrollment",
        "operationId": "completeTotpEnrollment",
        "parameters": [
          {
            "name": "totpRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/totpRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP enrollment completed successfully",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/username": {
      "get": {
        "security": [],
        "description": "Shows the username authentication form for OIDC login (alias for password)",
        "produces": [
          "text/html"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Display username authentication form",
        "operationId": "showUsernameLogin",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HTML login form",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via username for OIDC flow (alias for password auth)",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with username",
        "operationId": "authenticateUsername",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiError": {
      "type": "object",
      "properties": {
        "args": {
          "$ref": "#/definitions/apiErrorArgs"
        },
        "cause": {
          "$ref": "#/definitions/apiErrorCause"
        },
        "causeMessage": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": true
        },
        "message": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "apiErrorArgs": {
      "type": "object",
      "properties": {
        "urlVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiErrorCause": {
      "allOf": [
        {
          "$ref": "#/definitions/apiFieldError"
        },
        {
          "$ref": "#/definitions/apiError"
        }
      ]
    },
    "apiErrorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/apiError"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "apiFieldError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "value": {
          "description": "can be any value - string, number, boolean, array or object"
        }
      }
    },
    "authQueryDetail": {
      "type": "object",
      "required": [
        "provider"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/mfaFormats"
        },
        "httpMethod": {
          "type": "string"
        },
        "httpUrl": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isTotpEnrolled": {
          "type": "boolean"
        },
        "maxLength": {
          "type": "integer"
        },
        "minLength": {
          "type": "integer"
        },
        "provider": {
          "$ref": "#/definitions/mfaProviders"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "typeId": {
          "$ref": "#/definitions/authQueryType"
        }
      }
    },
    "authQueryType": {
      "type": "string",
      "enum": [
        "MFA",
        "TOTP",
        "EXT-JWT"
      ]
    },
    "authRequestBody": {
      "description": "Authentication request body for OIDC flows",
      "type": "object",
      "required": [
        "authRequestId"
      ],
      "properties": {
        "authRequestId": {
          "description": "The authentication request ID",
          "type": "string"
        }
      }
    },
    "authenticate": {
      "description": "A generic authenticate object meant for use with the /authenticate path. Required fields depend on authentication method.",
      "type": "object",
      "properties": {
        "configTypes": {
          "$ref": "#/definitions/configTypes"
        },
        "envInfo": {
          "$ref": "#/definitions/envInfo"
        },
        "password": {
          "$ref": "#/definitions/password"
        },
        "sdkInfo": {
          "$ref": "#/definitions/sdkInfo"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "baseEntity": {
      "description": "Fields shared by all Edge API entities",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "_links"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "configTypes": {
      "description": "Specific configuration types that should be returned",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "detailMfa": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "required": [
            "isVerified"
          ],
          "properties": {
            "isVerified": {
              "type": "boolean"
            },
            "provisioningUrl": {
              "description": "Not provided if MFA verification has been completed",
              "type": "string"
            },
            "recoveryCodes": {
              "description": "Not provided if MFA verification has been completed",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "empty": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "example": {}
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "envInfo": {
      "description": "Environment information an authenticating client may provide",
      "type": "object",
      "properties": {
        "arch": {
          "type": "string",
          "maxLength": 255
        },
        "domain": {
          "type": "string",
          "maxLength": 253
        },
        "hostname": {
          "type": "string",
          "maxLength": 253
        },
        "os": {
          "type": "string",
          "maxLength": 255
        },
        "osRelease": {
          "type": "string",
          "maxLength": 255
        },
        "osVersion": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "link": {
      "description": "A link to another resource",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string"
        }
      }
    },
    "links": {
      "description": "A map of named links",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/link"
      },
      "x-omitempty": false
    },
    "meta": {
      "type": "object",
      "properties": {
        "apiEnrollmentVersion": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "filterableFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "pagination": {
          "$ref": "#/definitions/pagination"
        }
      }
    },
    "mfaFormats": {
      "type": "string",
      "enum": [
        "numeric",
        "alpha",
        "alphaNumeric"
      ]
    },
    "mfaProviders": {
      "type": "string",
      "enum": [
        "ziti",
        "url"
      ]
    },
    "oidcUpdbCredentials": {
      "description": "OIDC authentication credentials",
      "type": "object",
      "required": [
        "authRequestId"
      ],
      "properties": {
        "authRequestId": {
          "description": "The authentication request ID",
          "type": "string"
        },
        "configTypes": {
          "$ref": "#/definitions/configTypes"
        },
        "envInfo": {
          "$ref": "#/definitions/envInfo"
        },
        "password": {
          "$ref": "#/definitions/password"
        },
        "sdkInfo": {
          "$ref": "#/definitions/sdkInfo"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "pagination": {
      "type": "object",
      "required": [
        "limit",
        "offset",
        "totalCount"
      ],
      "properties": {
        "limit": {
          "type": "number",
          "format": "int64"
        },
        "offset": {
          "type": "number",
          "format": "int64"
        },
        "totalCount": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "password": {
      "type": "string",
      "maxLength": 100,
      "minLength": 5
    },
    "sdkInfo": {
      "description": "SDK information an authenticating client may provide",
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "maxLength": 255
        },
        "appVersion": {
          "type": "string",
          "maxLength": 255
        },
        "branch": {
          "type": "string",
          "maxLength": 255
        },
        "revision": {
          "type": "string",
          "maxLength": 255
        },
        "type": {
          "type": "string",
          "maxLength": 255
        },
        "version": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "subTags": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "tags": {
      "description": "A map of user defined fields and values. The values are limited to the following types/values: null, string, boolean",
      "allOf": [
        {
          "$ref": "#/definitions/subTags"
        }
      ],
      "x-nullable": true
    },
    "totpRequestBody": {
      "description": "TOTP verification request",
      "type": "object",
      "required": [
        "authRequestId",
        "code"
      ],
      "properties": {
        "authRequestId": {
          "description": "The authentication request ID",
          "type": "string"
        },
        "code": {
          "description": "The TOTP code to verify",
          "type": "string"
        }
      }
    },
    "username": {
      "type": "string",
      "maxLength": 100,
      "minLength": 4
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json",
    "text/html"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "OpenZiti Edge OIDC Authentication API",
    "title": "Ziti Edge OIDC Auth",
    "contact": {
      "name": "OpenZiti",
      "url": "https://openziti.discourse.group",
      "email": "help@openziti.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.26.47"
  },
  "host": "demo.ziti.dev",
  "basePath": "/oidc/login",
  "paths": {
    "/auth-queries": {
      "get": {
        "security": [],
        "description": "Returns authentication queries for the specified auth request ID",
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "List authentication queries",
        "operationId": "listAuthQueries",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A list of authentication queries",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/cert": {
      "get": {
        "security": [],
        "description": "Handles certificate-based authentication for OIDC flow",
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Certificate authentication endpoint",
        "operationId": "showCertAuth",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication prompt",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via client certificate for OIDC flow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with client certificate",
        "operationId": "authenticateCert",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/ext-jwt": {
      "get": {
        "security": [],
        "description": "Handles external JWT-based authentication for OIDC flow",
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "External JWT authentication endpoint",
        "operationId": "showExtJwtAuth",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication prompt",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via external JWT for OIDC flow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with external JWT",
        "operationId": "authenticateExtJwt",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/password": {
      "get": {
        "security": [],
        "description": "Shows the password authentication form for OIDC login",
        "produces": [
          "text/html"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Display password authentication form",
        "operationId": "showPasswordLogin",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HTML login form",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via username/password for OIDC flow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with username and password",
        "operationId": "authenticatePassword",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/totp": {
      "post": {
        "security": [],
        "description": "Verifies a TOTP code for OIDC authentication",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Verify TOTP code",
        "operationId": "verifyTotp",
        "parameters": [
          {
            "name": "totpRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/totpRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP verification result (HTML response)",
            "schema": {
              "type": "string"
            }
          },
          "302": {
            "description": "Redirect to callback URL on successful verification",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/totp/enroll": {
      "post": {
        "security": [],
        "description": "Initiates TOTP enrollment for the current authentication session",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Start TOTP enrollment",
        "operationId": "startTotpEnrollment",
        "parameters": [
          {
            "name": "authRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authRequestBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TOTP enrollment started successfully",
            "schema": {
              "$ref": "#/definitions/detailMfa"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [],
        "description": "Cancels an ongoing TOTP enrollment",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Cancel TOTP enrollment",
        "operationId": "deleteTotpEnrollment",
        "parameters": [
          {
            "name": "totpRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/totpRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP enrollment cancelled successfully",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/totp/enroll/verify": {
      "post": {
        "security": [],
        "description": "Completes TOTP enrollment by verifying the enrollment code",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "OIDC Authentication",
          "MFA"
        ],
        "summary": "Complete TOTP enrollment",
        "operationId": "completeTotpEnrollment",
        "parameters": [
          {
            "name": "totpRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/totpRequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TOTP enrollment completed successfully",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    },
    "/username": {
      "get": {
        "security": [],
        "description": "Shows the username authentication form for OIDC login (alias for password)",
        "produces": [
          "text/html"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Display username authentication form",
        "operationId": "showUsernameLogin",
        "parameters": [
          {
            "type": "string",
            "description": "Authentication request ID",
            "name": "authRequestID",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HTML login form",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Authenticates a user via username for OIDC flow (alias for password auth)",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "OIDC Authentication"
        ],
        "summary": "Authenticate with username",
        "operationId": "authenticateUsername",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/oidcUpdbCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication queries or TOTP required",
            "schema": {
              "type": "object",
              "properties": {
                "authQueries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/authQueryDetail"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirect to callback URL",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Callback URL"
              },
              "totp-required": {
                "type": "string",
                "description": "Indicates if TOTP is required"
              }
            }
          },
          "400": {
            "description": "The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": {
                    "details": {
                      "context": "(root)",
                      "field": "(root)",
                      "property": "fooField3"
                    },
                    "field": "(root)",
                    "message": "(root): fooField3 is required",
                    "type": "required",
                    "value": {
                      "fooField": "abc",
                      "fooField2": "def"
                    }
                  },
                  "causeMessage": "schema validation failed",
                  "code": "COULD_NOT_VALIDATE",
                  "message": "The supplied request contains an invalid document",
                  "requestId": "ac6766d6-3a09-44b3-8d8a-1b541d97fdd9"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          },
          "401": {
            "description": "The authentication request could not be processed as the credentials are invalid",
            "schema": {
              "$ref": "#/definitions/apiErrorEnvelope"
            },
            "examples": {
              "application/json": {
                "error": {
                  "args": {
                    "urlVars": {}
                  },
                  "cause": "",
                  "causeMessage": "",
                  "code": "INVALID_AUTH",
                  "message": "The authentication request failed",
                  "requestId": "5952ed10-3091-474f-a691-47ebab6990dc"
                },
                "meta": {
                  "apiEnrollmentVersion": "0.0.1",
                  "apiVersion": "0.0.1"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "apiError": {
      "type": "object",
      "properties": {
        "args": {
          "$ref": "#/definitions/apiErrorArgs"
        },
        "cause": {
          "$ref": "#/definitions/apiErrorCause"
        },
        "causeMessage": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": true
        },
        "message": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "apiErrorArgs": {
      "type": "object",
      "properties": {
        "urlVars": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiErrorCause": {
      "allOf": [
        {
          "$ref": "#/definitions/apiFieldError"
        },
        {
          "$ref": "#/definitions/apiError"
        }
      ]
    },
    "apiErrorEnvelope": {
      "type": "object",
      "required": [
        "meta",
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/apiError"
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "apiFieldError": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "value": {
          "description": "can be any value - string, number, boolean, array or object"
        }
      }
    },
    "authQueryDetail": {
      "type": "object",
      "required": [
        "provider"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/mfaFormats"
        },
        "httpMethod": {
          "type": "string"
        },
        "httpUrl": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isTotpEnrolled": {
          "type": "boolean"
        },
        "maxLength": {
          "type": "integer"
        },
        "minLength": {
          "type": "integer"
        },
        "provider": {
          "$ref": "#/definitions/mfaProviders"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "typeId": {
          "$ref": "#/definitions/authQueryType"
        }
      }
    },
    "authQueryType": {
      "type": "string",
      "enum": [
        "MFA",
        "TOTP",
        "EXT-JWT"
      ]
    },
    "authRequestBody": {
      "description": "Authentication request body for OIDC flows",
      "type": "object",
      "required": [
        "authRequestId"
      ],
      "properties": {
        "authRequestId": {
          "description": "The authentication request ID",
          "type": "string"
        }
      }
    },
    "authenticate": {
      "description": "A generic authenticate object meant for use with the /authenticate path. Required fields depend on authentication method.",
      "type": "object",
      "properties": {
        "configTypes": {
          "$ref": "#/definitions/configTypes"
        },
        "envInfo": {
          "$ref": "#/definitions/envInfo"
        },
        "password": {
          "$ref": "#/definitions/password"
        },
        "sdkInfo": {
          "$ref": "#/definitions/sdkInfo"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "baseEntity": {
      "description": "Fields shared by all Edge API entities",
      "type": "object",
      "required": [
        "id",
        "createdAt",
        "updatedAt",
        "_links"
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/links"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "configTypes": {
      "description": "Specific configuration types that should be returned",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "detailMfa": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/baseEntity"
        },
        {
          "required": [
            "isVerified"
          ],
          "properties": {
            "isVerified": {
              "type": "boolean"
            },
            "provisioningUrl": {
              "description": "Not provided if MFA verification has been completed",
              "type": "string"
            },
            "recoveryCodes": {
              "description": "Not provided if MFA verification has been completed",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "empty": {
      "type": "object",
      "required": [
        "meta",
        "data"
      ],
      "properties": {
        "data": {
          "type": "object",
          "example": {}
        },
        "meta": {
          "$ref": "#/definitions/meta"
        }
      }
    },
    "envInfo": {
      "description": "Environment information an authenticating client may provide",
      "type": "object",
      "properties": {
        "arch": {
          "type": "string",
          "maxLength": 255
        },
        "domain": {
          "type": "string",
          "maxLength": 253
        },
        "hostname": {
          "type": "string",
          "maxLength": 253
        },
        "os": {
          "type": "string",
          "maxLength": 255
        },
        "osRelease": {
          "type": "string",
          "maxLength": 255
        },
        "osVersion": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "link": {
      "description": "A link to another resource",
      "type": "object",
      "required": [
        "href"
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string"
        }
      }
    },
    "links": {
      "description": "A map of named links",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/link"
      },
      "x-omitempty": false
    },
    "meta": {
      "type": "object",
      "properties": {
        "apiEnrollmentVersion": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "filterableFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-omitempty": true
        },
        "pagination": {
          "$ref": "#/definitions/pagination"
        }
      }
    },
    "mfaFormats": {
      "type": "string",
      "enum": [
        "numeric",
        "alpha",
        "alphaNumeric"
      ]
    },
    "mfaProviders": {
      "type": "string",
      "enum": [
        "ziti",
        "url"
      ]
    },
    "oidcUpdbCredentials": {
      "description": "OIDC authentication credentials",
      "type": "object",
      "required": [
        "authRequestId"
      ],
      "properties": {
        "authRequestId": {
          "description": "The authentication request ID",
          "type": "string"
        },
        "configTypes": {
          "$ref": "#/definitions/configTypes"
        },
        "envInfo": {
          "$ref": "#/definitions/envInfo"
        },
        "password": {
          "$ref": "#/definitions/password"
        },
        "sdkInfo": {
          "$ref": "#/definitions/sdkInfo"
        },
        "username": {
          "$ref": "#/definitions/username"
        }
      }
    },
    "pagination": {
      "type": "object",
      "required": [
        "limit",
        "offset",
        "totalCount"
      ],
      "properties": {
        "limit": {
          "type": "number",
          "format": "int64"
        },
        "offset": {
          "type": "number",
          "format": "int64"
        },
        "totalCount": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "password": {
      "type": "string",
      "maxLength": 100,
      "minLength": 5
    },
    "sdkInfo": {
      "description": "SDK information an authenticating client may provide",
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "maxLength": 255
        },
        "appVersion": {
          "type": "string",
          "maxLength": 255
        },
        "branch": {
          "type": "string",
          "maxLength": 255
        },
        "revision": {
          "type": "string",
          "maxLength": 255
        },
        "type": {
          "type": "string",
          "maxLength": 255
        },
        "version": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "subTags": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "tags": {
      "description": "A map of user defined fields and values. The values are limited to the following types/values: null, string, boolean",
      "allOf": [
        {
          "$ref": "#/definitions/subTags"
        }
      ],
      "x-nullable": true
    },
    "totpRequestBody": {
      "description": "TOTP verification request",
      "type": "object",
      "required": [
        "authRequestId",
        "code"
      ],
      "properties": {
        "authRequestId": {
          "description": "The authentication request ID",
          "type": "string"
        },
        "code": {
          "description": "The TOTP code to verify",
          "type": "string"
        }
      }
    },
    "username": {
      "type": "string",
      "maxLength": 100,
      "minLength": 4
    }
  }
}`))
}
