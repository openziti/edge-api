// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package o_id_c_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// AuthenticateCertOKCode is the HTTP code returned for type AuthenticateCertOK
const AuthenticateCertOKCode int = 200

/*AuthenticateCertOK Authentication queries or TOTP required

swagger:response authenticateCertOK
*/
type AuthenticateCertOK struct {

	/*
	  In: Body
	*/
	Payload *AuthenticateCertOKBody `json:"body,omitempty"`
}

// NewAuthenticateCertOK creates AuthenticateCertOK with default headers values
func NewAuthenticateCertOK() *AuthenticateCertOK {

	return &AuthenticateCertOK{}
}

// WithPayload adds the payload to the authenticate cert o k response
func (o *AuthenticateCertOK) WithPayload(payload *AuthenticateCertOKBody) *AuthenticateCertOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authenticate cert o k response
func (o *AuthenticateCertOK) SetPayload(payload *AuthenticateCertOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthenticateCertOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AuthenticateCertFoundCode is the HTTP code returned for type AuthenticateCertFound
const AuthenticateCertFoundCode int = 302

/*AuthenticateCertFound Redirect to callback URL

swagger:response authenticateCertFound
*/
type AuthenticateCertFound struct {
	/*Callback URL

	 */
	Location string `json:"Location"`
	/*Indicates if TOTP is required

	 */
	TotpRequired string `json:"totp-required"`
}

// NewAuthenticateCertFound creates AuthenticateCertFound with default headers values
func NewAuthenticateCertFound() *AuthenticateCertFound {

	return &AuthenticateCertFound{}
}

// WithLocation adds the location to the authenticate cert found response
func (o *AuthenticateCertFound) WithLocation(location string) *AuthenticateCertFound {
	o.Location = location
	return o
}

// SetLocation sets the location to the authenticate cert found response
func (o *AuthenticateCertFound) SetLocation(location string) {
	o.Location = location
}

// WithTotpRequired adds the totpRequired to the authenticate cert found response
func (o *AuthenticateCertFound) WithTotpRequired(totpRequired string) *AuthenticateCertFound {
	o.TotpRequired = totpRequired
	return o
}

// SetTotpRequired sets the totpRequired to the authenticate cert found response
func (o *AuthenticateCertFound) SetTotpRequired(totpRequired string) {
	o.TotpRequired = totpRequired
}

// WriteResponse to the client
func (o *AuthenticateCertFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header totp-required

	totpRequired := o.TotpRequired
	if totpRequired != "" {
		rw.Header().Set("totp-required", totpRequired)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(302)
}

// AuthenticateCertBadRequestCode is the HTTP code returned for type AuthenticateCertBadRequest
const AuthenticateCertBadRequestCode int = 400

/*AuthenticateCertBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response authenticateCertBadRequest
*/
type AuthenticateCertBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewAuthenticateCertBadRequest creates AuthenticateCertBadRequest with default headers values
func NewAuthenticateCertBadRequest() *AuthenticateCertBadRequest {

	return &AuthenticateCertBadRequest{}
}

// WithPayload adds the payload to the authenticate cert bad request response
func (o *AuthenticateCertBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *AuthenticateCertBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authenticate cert bad request response
func (o *AuthenticateCertBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthenticateCertBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AuthenticateCertUnauthorizedCode is the HTTP code returned for type AuthenticateCertUnauthorized
const AuthenticateCertUnauthorizedCode int = 401

/*AuthenticateCertUnauthorized The authentication request could not be processed as the credentials are invalid

swagger:response authenticateCertUnauthorized
*/
type AuthenticateCertUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewAuthenticateCertUnauthorized creates AuthenticateCertUnauthorized with default headers values
func NewAuthenticateCertUnauthorized() *AuthenticateCertUnauthorized {

	return &AuthenticateCertUnauthorized{}
}

// WithPayload adds the payload to the authenticate cert unauthorized response
func (o *AuthenticateCertUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *AuthenticateCertUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the authenticate cert unauthorized response
func (o *AuthenticateCertUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthenticateCertUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
