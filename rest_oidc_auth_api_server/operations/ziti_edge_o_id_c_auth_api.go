// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/edge-api/rest_oidc_auth_api_server/operations/o_id_c_authentication"
)

// NewZitiEdgeOIDCAuthAPI creates a new ZitiEdgeOIDCAuth instance
func NewZitiEdgeOIDCAuthAPI(spec *loads.Document) *ZitiEdgeOIDCAuthAPI {
	return &ZitiEdgeOIDCAuthAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:    runtime.JSONConsumer(),
		UrlformConsumer: runtime.DiscardConsumer,

		HTMLProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("html producer has not yet been implemented")
		}),
		JSONProducer: runtime.JSONProducer(),

		OIDcAuthenticationAuthenticateCertHandler: o_id_c_authentication.AuthenticateCertHandlerFunc(func(params o_id_c_authentication.AuthenticateCertParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.AuthenticateCert has not yet been implemented")
		}),
		OIDcAuthenticationAuthenticateExtJWTHandler: o_id_c_authentication.AuthenticateExtJWTHandlerFunc(func(params o_id_c_authentication.AuthenticateExtJWTParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.AuthenticateExtJWT has not yet been implemented")
		}),
		OIDcAuthenticationAuthenticatePasswordHandler: o_id_c_authentication.AuthenticatePasswordHandlerFunc(func(params o_id_c_authentication.AuthenticatePasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.AuthenticatePassword has not yet been implemented")
		}),
		OIDcAuthenticationAuthenticateUsernameHandler: o_id_c_authentication.AuthenticateUsernameHandlerFunc(func(params o_id_c_authentication.AuthenticateUsernameParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.AuthenticateUsername has not yet been implemented")
		}),
		OIDcAuthenticationCompleteTotpEnrollmentHandler: o_id_c_authentication.CompleteTotpEnrollmentHandlerFunc(func(params o_id_c_authentication.CompleteTotpEnrollmentParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.CompleteTotpEnrollment has not yet been implemented")
		}),
		OIDcAuthenticationDeleteTotpEnrollmentHandler: o_id_c_authentication.DeleteTotpEnrollmentHandlerFunc(func(params o_id_c_authentication.DeleteTotpEnrollmentParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.DeleteTotpEnrollment has not yet been implemented")
		}),
		OIDcAuthenticationListAuthQueriesHandler: o_id_c_authentication.ListAuthQueriesHandlerFunc(func(params o_id_c_authentication.ListAuthQueriesParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.ListAuthQueries has not yet been implemented")
		}),
		OIDcAuthenticationShowCertAuthHandler: o_id_c_authentication.ShowCertAuthHandlerFunc(func(params o_id_c_authentication.ShowCertAuthParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.ShowCertAuth has not yet been implemented")
		}),
		OIDcAuthenticationShowExtJWTAuthHandler: o_id_c_authentication.ShowExtJWTAuthHandlerFunc(func(params o_id_c_authentication.ShowExtJWTAuthParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.ShowExtJWTAuth has not yet been implemented")
		}),
		OIDcAuthenticationShowPasswordLoginHandler: o_id_c_authentication.ShowPasswordLoginHandlerFunc(func(params o_id_c_authentication.ShowPasswordLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.ShowPasswordLogin has not yet been implemented")
		}),
		OIDcAuthenticationShowUsernameLoginHandler: o_id_c_authentication.ShowUsernameLoginHandlerFunc(func(params o_id_c_authentication.ShowUsernameLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.ShowUsernameLogin has not yet been implemented")
		}),
		OIDcAuthenticationStartTotpEnrollmentHandler: o_id_c_authentication.StartTotpEnrollmentHandlerFunc(func(params o_id_c_authentication.StartTotpEnrollmentParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.StartTotpEnrollment has not yet been implemented")
		}),
		OIDcAuthenticationVerifyTotpHandler: o_id_c_authentication.VerifyTotpHandlerFunc(func(params o_id_c_authentication.VerifyTotpParams) middleware.Responder {
			return middleware.NotImplemented("operation o_id_c_authentication.VerifyTotp has not yet been implemented")
		}),
	}
}

/*ZitiEdgeOIDCAuthAPI OpenZiti Edge OIDC Authentication API */
type ZitiEdgeOIDCAuthAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// HTMLProducer registers a producer for the following mime types:
	//   - text/html
	HTMLProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OIDcAuthenticationAuthenticateCertHandler sets the operation handler for the authenticate cert operation
	OIDcAuthenticationAuthenticateCertHandler o_id_c_authentication.AuthenticateCertHandler
	// OIDcAuthenticationAuthenticateExtJWTHandler sets the operation handler for the authenticate ext Jwt operation
	OIDcAuthenticationAuthenticateExtJWTHandler o_id_c_authentication.AuthenticateExtJWTHandler
	// OIDcAuthenticationAuthenticatePasswordHandler sets the operation handler for the authenticate password operation
	OIDcAuthenticationAuthenticatePasswordHandler o_id_c_authentication.AuthenticatePasswordHandler
	// OIDcAuthenticationAuthenticateUsernameHandler sets the operation handler for the authenticate username operation
	OIDcAuthenticationAuthenticateUsernameHandler o_id_c_authentication.AuthenticateUsernameHandler
	// OIDcAuthenticationCompleteTotpEnrollmentHandler sets the operation handler for the complete totp enrollment operation
	OIDcAuthenticationCompleteTotpEnrollmentHandler o_id_c_authentication.CompleteTotpEnrollmentHandler
	// OIDcAuthenticationDeleteTotpEnrollmentHandler sets the operation handler for the delete totp enrollment operation
	OIDcAuthenticationDeleteTotpEnrollmentHandler o_id_c_authentication.DeleteTotpEnrollmentHandler
	// OIDcAuthenticationListAuthQueriesHandler sets the operation handler for the list auth queries operation
	OIDcAuthenticationListAuthQueriesHandler o_id_c_authentication.ListAuthQueriesHandler
	// OIDcAuthenticationShowCertAuthHandler sets the operation handler for the show cert auth operation
	OIDcAuthenticationShowCertAuthHandler o_id_c_authentication.ShowCertAuthHandler
	// OIDcAuthenticationShowExtJWTAuthHandler sets the operation handler for the show ext Jwt auth operation
	OIDcAuthenticationShowExtJWTAuthHandler o_id_c_authentication.ShowExtJWTAuthHandler
	// OIDcAuthenticationShowPasswordLoginHandler sets the operation handler for the show password login operation
	OIDcAuthenticationShowPasswordLoginHandler o_id_c_authentication.ShowPasswordLoginHandler
	// OIDcAuthenticationShowUsernameLoginHandler sets the operation handler for the show username login operation
	OIDcAuthenticationShowUsernameLoginHandler o_id_c_authentication.ShowUsernameLoginHandler
	// OIDcAuthenticationStartTotpEnrollmentHandler sets the operation handler for the start totp enrollment operation
	OIDcAuthenticationStartTotpEnrollmentHandler o_id_c_authentication.StartTotpEnrollmentHandler
	// OIDcAuthenticationVerifyTotpHandler sets the operation handler for the verify totp operation
	OIDcAuthenticationVerifyTotpHandler o_id_c_authentication.VerifyTotpHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ZitiEdgeOIDCAuthAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ZitiEdgeOIDCAuthAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ZitiEdgeOIDCAuthAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ZitiEdgeOIDCAuthAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ZitiEdgeOIDCAuthAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ZitiEdgeOIDCAuthAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ZitiEdgeOIDCAuthAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ZitiEdgeOIDCAuthAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ZitiEdgeOIDCAuthAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ZitiEdgeOIDCAuthAPI
func (o *ZitiEdgeOIDCAuthAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.HTMLProducer == nil {
		unregistered = append(unregistered, "HTMLProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OIDcAuthenticationAuthenticateCertHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.AuthenticateCertHandler")
	}
	if o.OIDcAuthenticationAuthenticateExtJWTHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.AuthenticateExtJWTHandler")
	}
	if o.OIDcAuthenticationAuthenticatePasswordHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.AuthenticatePasswordHandler")
	}
	if o.OIDcAuthenticationAuthenticateUsernameHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.AuthenticateUsernameHandler")
	}
	if o.OIDcAuthenticationCompleteTotpEnrollmentHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.CompleteTotpEnrollmentHandler")
	}
	if o.OIDcAuthenticationDeleteTotpEnrollmentHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.DeleteTotpEnrollmentHandler")
	}
	if o.OIDcAuthenticationListAuthQueriesHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.ListAuthQueriesHandler")
	}
	if o.OIDcAuthenticationShowCertAuthHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.ShowCertAuthHandler")
	}
	if o.OIDcAuthenticationShowExtJWTAuthHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.ShowExtJWTAuthHandler")
	}
	if o.OIDcAuthenticationShowPasswordLoginHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.ShowPasswordLoginHandler")
	}
	if o.OIDcAuthenticationShowUsernameLoginHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.ShowUsernameLoginHandler")
	}
	if o.OIDcAuthenticationStartTotpEnrollmentHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.StartTotpEnrollmentHandler")
	}
	if o.OIDcAuthenticationVerifyTotpHandler == nil {
		unregistered = append(unregistered, "o_id_c_authentication.VerifyTotpHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ZitiEdgeOIDCAuthAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ZitiEdgeOIDCAuthAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *ZitiEdgeOIDCAuthAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ZitiEdgeOIDCAuthAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ZitiEdgeOIDCAuthAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "text/html":
			result["text/html"] = o.HTMLProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ZitiEdgeOIDCAuthAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the ziti edge o ID c auth API
func (o *ZitiEdgeOIDCAuthAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ZitiEdgeOIDCAuthAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cert"] = o_id_c_authentication.NewAuthenticateCert(o.context, o.OIDcAuthenticationAuthenticateCertHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ext-jwt"] = o_id_c_authentication.NewAuthenticateExtJWT(o.context, o.OIDcAuthenticationAuthenticateExtJWTHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/password"] = o_id_c_authentication.NewAuthenticatePassword(o.context, o.OIDcAuthenticationAuthenticatePasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/username"] = o_id_c_authentication.NewAuthenticateUsername(o.context, o.OIDcAuthenticationAuthenticateUsernameHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/totp/enroll/verify"] = o_id_c_authentication.NewCompleteTotpEnrollment(o.context, o.OIDcAuthenticationCompleteTotpEnrollmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/totp/enroll"] = o_id_c_authentication.NewDeleteTotpEnrollment(o.context, o.OIDcAuthenticationDeleteTotpEnrollmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth-queries"] = o_id_c_authentication.NewListAuthQueries(o.context, o.OIDcAuthenticationListAuthQueriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cert"] = o_id_c_authentication.NewShowCertAuth(o.context, o.OIDcAuthenticationShowCertAuthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ext-jwt"] = o_id_c_authentication.NewShowExtJWTAuth(o.context, o.OIDcAuthenticationShowExtJWTAuthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/password"] = o_id_c_authentication.NewShowPasswordLogin(o.context, o.OIDcAuthenticationShowPasswordLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/username"] = o_id_c_authentication.NewShowUsernameLogin(o.context, o.OIDcAuthenticationShowUsernameLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/totp/enroll"] = o_id_c_authentication.NewStartTotpEnrollment(o.context, o.OIDcAuthenticationStartTotpEnrollmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/totp"] = o_id_c_authentication.NewVerifyTotp(o.context, o.OIDcAuthenticationVerifyTotpHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ZitiEdgeOIDCAuthAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ZitiEdgeOIDCAuthAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ZitiEdgeOIDCAuthAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ZitiEdgeOIDCAuthAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ZitiEdgeOIDCAuthAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
