// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package enroll

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// EnrollTokenReader is a Reader for the EnrollToken structure.
type EnrollTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnrollTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnrollTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnrollTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnrollTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEnrollTokenConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewEnrollTokenGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEnrollTokenTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewEnrollTokenServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnrollTokenOK creates a EnrollTokenOK with default headers values
func NewEnrollTokenOK() *EnrollTokenOK {
	return &EnrollTokenOK{}
}

/* EnrollTokenOK describes a response with status code 200, with default header values.

A response containing and identities client certificate chains
*/
type EnrollTokenOK struct {
	Payload *rest_model.EnrollmentCertsEnvelope
}

func (o *EnrollTokenOK) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenOK  %+v", 200, o.Payload)
}
func (o *EnrollTokenOK) GetPayload() *rest_model.EnrollmentCertsEnvelope {
	return o.Payload
}

func (o *EnrollTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.EnrollmentCertsEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollTokenBadRequest creates a EnrollTokenBadRequest with default headers values
func NewEnrollTokenBadRequest() *EnrollTokenBadRequest {
	return &EnrollTokenBadRequest{}
}

/* EnrollTokenBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type EnrollTokenBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenBadRequest  %+v", 400, o.Payload)
}
func (o *EnrollTokenBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollTokenNotFound creates a EnrollTokenNotFound with default headers values
func NewEnrollTokenNotFound() *EnrollTokenNotFound {
	return &EnrollTokenNotFound{}
}

/* EnrollTokenNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type EnrollTokenNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollTokenNotFound) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenNotFound  %+v", 404, o.Payload)
}
func (o *EnrollTokenNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollTokenConflict creates a EnrollTokenConflict with default headers values
func NewEnrollTokenConflict() *EnrollTokenConflict {
	return &EnrollTokenConflict{}
}

/* EnrollTokenConflict describes a response with status code 409, with default header values.

The request could not be completed due to a conflict of configuration or state
*/
type EnrollTokenConflict struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollTokenConflict) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenConflict  %+v", 409, o.Payload)
}
func (o *EnrollTokenConflict) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollTokenConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollTokenGone creates a EnrollTokenGone with default headers values
func NewEnrollTokenGone() *EnrollTokenGone {
	return &EnrollTokenGone{}
}

/* EnrollTokenGone describes a response with status code 410, with default header values.

The request could not be completed as the resource is no longer available
*/
type EnrollTokenGone struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollTokenGone) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenGone  %+v", 410, o.Payload)
}
func (o *EnrollTokenGone) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollTokenGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollTokenTooManyRequests creates a EnrollTokenTooManyRequests with default headers values
func NewEnrollTokenTooManyRequests() *EnrollTokenTooManyRequests {
	return &EnrollTokenTooManyRequests{}
}

/* EnrollTokenTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type EnrollTokenTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollTokenTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenTooManyRequests  %+v", 429, o.Payload)
}
func (o *EnrollTokenTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollTokenTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollTokenServiceUnavailable creates a EnrollTokenServiceUnavailable with default headers values
func NewEnrollTokenServiceUnavailable() *EnrollTokenServiceUnavailable {
	return &EnrollTokenServiceUnavailable{}
}

/* EnrollTokenServiceUnavailable describes a response with status code 503, with default header values.

The request could not be completed due to the server being busy or in a temporarily bad state
*/
type EnrollTokenServiceUnavailable struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *EnrollTokenServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /enroll/token][%d] enrollTokenServiceUnavailable  %+v", 503, o.Payload)
}
func (o *EnrollTokenServiceUnavailable) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *EnrollTokenServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
