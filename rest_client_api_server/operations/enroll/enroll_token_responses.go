// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package enroll

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// EnrollTokenOKCode is the HTTP code returned for type EnrollTokenOK
const EnrollTokenOKCode int = 200

/*EnrollTokenOK A response containing and identities client certificate chains

swagger:response enrollTokenOK
*/
type EnrollTokenOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.EnrollmentCertsEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenOK creates EnrollTokenOK with default headers values
func NewEnrollTokenOK() *EnrollTokenOK {

	return &EnrollTokenOK{}
}

// WithPayload adds the payload to the enroll token o k response
func (o *EnrollTokenOK) WithPayload(payload *rest_model.EnrollmentCertsEnvelope) *EnrollTokenOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token o k response
func (o *EnrollTokenOK) SetPayload(payload *rest_model.EnrollmentCertsEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnrollTokenBadRequestCode is the HTTP code returned for type EnrollTokenBadRequest
const EnrollTokenBadRequestCode int = 400

/*EnrollTokenBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response enrollTokenBadRequest
*/
type EnrollTokenBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenBadRequest creates EnrollTokenBadRequest with default headers values
func NewEnrollTokenBadRequest() *EnrollTokenBadRequest {

	return &EnrollTokenBadRequest{}
}

// WithPayload adds the payload to the enroll token bad request response
func (o *EnrollTokenBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *EnrollTokenBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token bad request response
func (o *EnrollTokenBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnrollTokenNotFoundCode is the HTTP code returned for type EnrollTokenNotFound
const EnrollTokenNotFoundCode int = 404

/*EnrollTokenNotFound The requested resource does not exist

swagger:response enrollTokenNotFound
*/
type EnrollTokenNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenNotFound creates EnrollTokenNotFound with default headers values
func NewEnrollTokenNotFound() *EnrollTokenNotFound {

	return &EnrollTokenNotFound{}
}

// WithPayload adds the payload to the enroll token not found response
func (o *EnrollTokenNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *EnrollTokenNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token not found response
func (o *EnrollTokenNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnrollTokenConflictCode is the HTTP code returned for type EnrollTokenConflict
const EnrollTokenConflictCode int = 409

/*EnrollTokenConflict The request could not be completed due to a conflict of configuration or state

swagger:response enrollTokenConflict
*/
type EnrollTokenConflict struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenConflict creates EnrollTokenConflict with default headers values
func NewEnrollTokenConflict() *EnrollTokenConflict {

	return &EnrollTokenConflict{}
}

// WithPayload adds the payload to the enroll token conflict response
func (o *EnrollTokenConflict) WithPayload(payload *rest_model.APIErrorEnvelope) *EnrollTokenConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token conflict response
func (o *EnrollTokenConflict) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnrollTokenGoneCode is the HTTP code returned for type EnrollTokenGone
const EnrollTokenGoneCode int = 410

/*EnrollTokenGone The request could not be completed as the resource is no longer available

swagger:response enrollTokenGone
*/
type EnrollTokenGone struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenGone creates EnrollTokenGone with default headers values
func NewEnrollTokenGone() *EnrollTokenGone {

	return &EnrollTokenGone{}
}

// WithPayload adds the payload to the enroll token gone response
func (o *EnrollTokenGone) WithPayload(payload *rest_model.APIErrorEnvelope) *EnrollTokenGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token gone response
func (o *EnrollTokenGone) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnrollTokenTooManyRequestsCode is the HTTP code returned for type EnrollTokenTooManyRequests
const EnrollTokenTooManyRequestsCode int = 429

/*EnrollTokenTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response enrollTokenTooManyRequests
*/
type EnrollTokenTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenTooManyRequests creates EnrollTokenTooManyRequests with default headers values
func NewEnrollTokenTooManyRequests() *EnrollTokenTooManyRequests {

	return &EnrollTokenTooManyRequests{}
}

// WithPayload adds the payload to the enroll token too many requests response
func (o *EnrollTokenTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *EnrollTokenTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token too many requests response
func (o *EnrollTokenTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EnrollTokenServiceUnavailableCode is the HTTP code returned for type EnrollTokenServiceUnavailable
const EnrollTokenServiceUnavailableCode int = 503

/*EnrollTokenServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response enrollTokenServiceUnavailable
*/
type EnrollTokenServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewEnrollTokenServiceUnavailable creates EnrollTokenServiceUnavailable with default headers values
func NewEnrollTokenServiceUnavailable() *EnrollTokenServiceUnavailable {

	return &EnrollTokenServiceUnavailable{}
}

// WithPayload adds the payload to the enroll token service unavailable response
func (o *EnrollTokenServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *EnrollTokenServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enroll token service unavailable response
func (o *EnrollTokenServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrollTokenServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
