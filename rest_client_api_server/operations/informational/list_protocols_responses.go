// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package informational

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// ListProtocolsOKCode is the HTTP code returned for type ListProtocolsOK
const ListProtocolsOKCode int = 200

/*ListProtocolsOK A list of supported Edge protocols

swagger:response listProtocolsOK
*/
type ListProtocolsOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.ListProtocolsEnvelope `json:"body,omitempty"`
}

// NewListProtocolsOK creates ListProtocolsOK with default headers values
func NewListProtocolsOK() *ListProtocolsOK {

	return &ListProtocolsOK{}
}

// WithPayload adds the payload to the list protocols o k response
func (o *ListProtocolsOK) WithPayload(payload *rest_model.ListProtocolsEnvelope) *ListProtocolsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list protocols o k response
func (o *ListProtocolsOK) SetPayload(payload *rest_model.ListProtocolsEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProtocolsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProtocolsTooManyRequestsCode is the HTTP code returned for type ListProtocolsTooManyRequests
const ListProtocolsTooManyRequestsCode int = 429

/*ListProtocolsTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response listProtocolsTooManyRequests
*/
type ListProtocolsTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListProtocolsTooManyRequests creates ListProtocolsTooManyRequests with default headers values
func NewListProtocolsTooManyRequests() *ListProtocolsTooManyRequests {

	return &ListProtocolsTooManyRequests{}
}

// WithPayload adds the payload to the list protocols too many requests response
func (o *ListProtocolsTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ListProtocolsTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list protocols too many requests response
func (o *ListProtocolsTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProtocolsTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListProtocolsServiceUnavailableCode is the HTTP code returned for type ListProtocolsServiceUnavailable
const ListProtocolsServiceUnavailableCode int = 503

/*ListProtocolsServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response listProtocolsServiceUnavailable
*/
type ListProtocolsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListProtocolsServiceUnavailable creates ListProtocolsServiceUnavailable with default headers values
func NewListProtocolsServiceUnavailable() *ListProtocolsServiceUnavailable {

	return &ListProtocolsServiceUnavailable{}
}

// WithPayload adds the payload to the list protocols service unavailable response
func (o *ListProtocolsServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ListProtocolsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list protocols service unavailable response
func (o *ListProtocolsServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListProtocolsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
