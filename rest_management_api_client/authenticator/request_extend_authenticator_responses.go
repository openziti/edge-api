// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package authenticator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/edge-api/rest_model"
)

// RequestExtendAuthenticatorReader is a Reader for the RequestExtendAuthenticator structure.
type RequestExtendAuthenticatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestExtendAuthenticatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRequestExtendAuthenticatorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRequestExtendAuthenticatorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRequestExtendAuthenticatorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRequestExtendAuthenticatorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRequestExtendAuthenticatorTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRequestExtendAuthenticatorServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRequestExtendAuthenticatorOK creates a RequestExtendAuthenticatorOK with default headers values
func NewRequestExtendAuthenticatorOK() *RequestExtendAuthenticatorOK {
	return &RequestExtendAuthenticatorOK{}
}

/* RequestExtendAuthenticatorOK describes a response with status code 200, with default header values.

Base empty response
*/
type RequestExtendAuthenticatorOK struct {
	Payload *rest_model.Empty
}

func (o *RequestExtendAuthenticatorOK) Error() string {
	return fmt.Sprintf("[POST /authenticators/{id}/request-extend][%d] requestExtendAuthenticatorOK  %+v", 200, o.Payload)
}
func (o *RequestExtendAuthenticatorOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *RequestExtendAuthenticatorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestExtendAuthenticatorUnauthorized creates a RequestExtendAuthenticatorUnauthorized with default headers values
func NewRequestExtendAuthenticatorUnauthorized() *RequestExtendAuthenticatorUnauthorized {
	return &RequestExtendAuthenticatorUnauthorized{}
}

/* RequestExtendAuthenticatorUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type RequestExtendAuthenticatorUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RequestExtendAuthenticatorUnauthorized) Error() string {
	return fmt.Sprintf("[POST /authenticators/{id}/request-extend][%d] requestExtendAuthenticatorUnauthorized  %+v", 401, o.Payload)
}
func (o *RequestExtendAuthenticatorUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *RequestExtendAuthenticatorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestExtendAuthenticatorForbidden creates a RequestExtendAuthenticatorForbidden with default headers values
func NewRequestExtendAuthenticatorForbidden() *RequestExtendAuthenticatorForbidden {
	return &RequestExtendAuthenticatorForbidden{}
}

/* RequestExtendAuthenticatorForbidden describes a response with status code 403, with default header values.

The request could not be completed and will never complete due to unchangeable state or conflicts.
*/
type RequestExtendAuthenticatorForbidden struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RequestExtendAuthenticatorForbidden) Error() string {
	return fmt.Sprintf("[POST /authenticators/{id}/request-extend][%d] requestExtendAuthenticatorForbidden  %+v", 403, o.Payload)
}
func (o *RequestExtendAuthenticatorForbidden) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *RequestExtendAuthenticatorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestExtendAuthenticatorNotFound creates a RequestExtendAuthenticatorNotFound with default headers values
func NewRequestExtendAuthenticatorNotFound() *RequestExtendAuthenticatorNotFound {
	return &RequestExtendAuthenticatorNotFound{}
}

/* RequestExtendAuthenticatorNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type RequestExtendAuthenticatorNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RequestExtendAuthenticatorNotFound) Error() string {
	return fmt.Sprintf("[POST /authenticators/{id}/request-extend][%d] requestExtendAuthenticatorNotFound  %+v", 404, o.Payload)
}
func (o *RequestExtendAuthenticatorNotFound) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *RequestExtendAuthenticatorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestExtendAuthenticatorTooManyRequests creates a RequestExtendAuthenticatorTooManyRequests with default headers values
func NewRequestExtendAuthenticatorTooManyRequests() *RequestExtendAuthenticatorTooManyRequests {
	return &RequestExtendAuthenticatorTooManyRequests{}
}

/* RequestExtendAuthenticatorTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type RequestExtendAuthenticatorTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RequestExtendAuthenticatorTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /authenticators/{id}/request-extend][%d] requestExtendAuthenticatorTooManyRequests  %+v", 429, o.Payload)
}
func (o *RequestExtendAuthenticatorTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *RequestExtendAuthenticatorTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestExtendAuthenticatorServiceUnavailable creates a RequestExtendAuthenticatorServiceUnavailable with default headers values
func NewRequestExtendAuthenticatorServiceUnavailable() *RequestExtendAuthenticatorServiceUnavailable {
	return &RequestExtendAuthenticatorServiceUnavailable{}
}

/* RequestExtendAuthenticatorServiceUnavailable describes a response with status code 503, with default header values.

The request could not be completed due to the server being busy or in a temporarily bad state
*/
type RequestExtendAuthenticatorServiceUnavailable struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RequestExtendAuthenticatorServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /authenticators/{id}/request-extend][%d] requestExtendAuthenticatorServiceUnavailable  %+v", 503, o.Payload)
}
func (o *RequestExtendAuthenticatorServiceUnavailable) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *RequestExtendAuthenticatorServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
