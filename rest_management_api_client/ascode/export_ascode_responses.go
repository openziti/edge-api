// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package ascode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/openziti/edge-api/rest_model"
)

// ExportAscodeReader is a Reader for the ExportAscode structure.
type ExportAscodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportAscodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportAscodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportAscodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportAscodeOK creates a ExportAscodeOK with default headers values
func NewExportAscodeOK() *ExportAscodeOK {
	return &ExportAscodeOK{}
}

/* ExportAscodeOK describes a response with status code 200, with default header values.

Network configuration bundle exported
*/
type ExportAscodeOK struct {
}

func (o *ExportAscodeOK) Error() string {
	return fmt.Sprintf("[POST /ascode/export][%d] exportAscodeOK ", 200)
}

func (o *ExportAscodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportAscodeUnauthorized creates a ExportAscodeUnauthorized with default headers values
func NewExportAscodeUnauthorized() *ExportAscodeUnauthorized {
	return &ExportAscodeUnauthorized{}
}

/* ExportAscodeUnauthorized describes a response with status code 401, with default header values.

The supplied session does not have the correct access rights to request this resource
*/
type ExportAscodeUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *ExportAscodeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ascode/export][%d] exportAscodeUnauthorized  %+v", 401, o.Payload)
}
func (o *ExportAscodeUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *ExportAscodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExportAscodeBody export ascode body
swagger:model ExportAscodeBody
*/
type ExportAscodeBody struct {

	// format
	// Enum: [yaml json]
	Format string `json:"format,omitempty"`

	// types
	Types string `json:"types,omitempty"`
}

// Validate validates this export ascode body
func (o *ExportAscodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exportAscodeBodyTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yaml","json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exportAscodeBodyTypeFormatPropEnum = append(exportAscodeBodyTypeFormatPropEnum, v)
	}
}

const (

	// ExportAscodeBodyFormatYaml captures enum value "yaml"
	ExportAscodeBodyFormatYaml string = "yaml"

	// ExportAscodeBodyFormatJSON captures enum value "json"
	ExportAscodeBodyFormatJSON string = "json"
)

// prop value enum
func (o *ExportAscodeBody) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exportAscodeBodyTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ExportAscodeBody) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.Format) { // not required
		return nil
	}

	// value enum
	if err := o.validateFormatEnum("exportRequest"+"."+"format", "body", o.Format); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this export ascode body based on context it is used
func (o *ExportAscodeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExportAscodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExportAscodeBody) UnmarshalBinary(b []byte) error {
	var res ExportAscodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
