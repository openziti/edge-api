// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package certificate_authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// VerifyCaOKCode is the HTTP code returned for type VerifyCaOK
const VerifyCaOKCode int = 200

/*VerifyCaOK Base empty response

swagger:response verifyCaOK
*/
type VerifyCaOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewVerifyCaOK creates VerifyCaOK with default headers values
func NewVerifyCaOK() *VerifyCaOK {

	return &VerifyCaOK{}
}

// WithPayload adds the payload to the verify ca o k response
func (o *VerifyCaOK) WithPayload(payload *rest_model.Empty) *VerifyCaOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify ca o k response
func (o *VerifyCaOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyCaOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VerifyCaBadRequestCode is the HTTP code returned for type VerifyCaBadRequest
const VerifyCaBadRequestCode int = 400

/*VerifyCaBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response verifyCaBadRequest
*/
type VerifyCaBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewVerifyCaBadRequest creates VerifyCaBadRequest with default headers values
func NewVerifyCaBadRequest() *VerifyCaBadRequest {

	return &VerifyCaBadRequest{}
}

// WithPayload adds the payload to the verify ca bad request response
func (o *VerifyCaBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *VerifyCaBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify ca bad request response
func (o *VerifyCaBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyCaBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VerifyCaUnauthorizedCode is the HTTP code returned for type VerifyCaUnauthorized
const VerifyCaUnauthorizedCode int = 401

/*VerifyCaUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response verifyCaUnauthorized
*/
type VerifyCaUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewVerifyCaUnauthorized creates VerifyCaUnauthorized with default headers values
func NewVerifyCaUnauthorized() *VerifyCaUnauthorized {

	return &VerifyCaUnauthorized{}
}

// WithPayload adds the payload to the verify ca unauthorized response
func (o *VerifyCaUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *VerifyCaUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify ca unauthorized response
func (o *VerifyCaUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyCaUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VerifyCaNotFoundCode is the HTTP code returned for type VerifyCaNotFound
const VerifyCaNotFoundCode int = 404

/*VerifyCaNotFound The requested resource does not exist

swagger:response verifyCaNotFound
*/
type VerifyCaNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewVerifyCaNotFound creates VerifyCaNotFound with default headers values
func NewVerifyCaNotFound() *VerifyCaNotFound {

	return &VerifyCaNotFound{}
}

// WithPayload adds the payload to the verify ca not found response
func (o *VerifyCaNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *VerifyCaNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify ca not found response
func (o *VerifyCaNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyCaNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VerifyCaTooManyRequestsCode is the HTTP code returned for type VerifyCaTooManyRequests
const VerifyCaTooManyRequestsCode int = 429

/*VerifyCaTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response verifyCaTooManyRequests
*/
type VerifyCaTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewVerifyCaTooManyRequests creates VerifyCaTooManyRequests with default headers values
func NewVerifyCaTooManyRequests() *VerifyCaTooManyRequests {

	return &VerifyCaTooManyRequests{}
}

// WithPayload adds the payload to the verify ca too many requests response
func (o *VerifyCaTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *VerifyCaTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify ca too many requests response
func (o *VerifyCaTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyCaTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VerifyCaServiceUnavailableCode is the HTTP code returned for type VerifyCaServiceUnavailable
const VerifyCaServiceUnavailableCode int = 503

/*VerifyCaServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response verifyCaServiceUnavailable
*/
type VerifyCaServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewVerifyCaServiceUnavailable creates VerifyCaServiceUnavailable with default headers values
func NewVerifyCaServiceUnavailable() *VerifyCaServiceUnavailable {

	return &VerifyCaServiceUnavailable{}
}

// WithPayload adds the payload to the verify ca service unavailable response
func (o *VerifyCaServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *VerifyCaServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify ca service unavailable response
func (o *VerifyCaServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyCaServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
