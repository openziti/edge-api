// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package certificate_authority

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// UpdateCaOKCode is the HTTP code returned for type UpdateCaOK
const UpdateCaOKCode int = 200

/*UpdateCaOK The update request was successful and the resource has been altered

swagger:response updateCaOK
*/
type UpdateCaOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewUpdateCaOK creates UpdateCaOK with default headers values
func NewUpdateCaOK() *UpdateCaOK {

	return &UpdateCaOK{}
}

// WithPayload adds the payload to the update ca o k response
func (o *UpdateCaOK) WithPayload(payload *rest_model.Empty) *UpdateCaOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update ca o k response
func (o *UpdateCaOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCaOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCaBadRequestCode is the HTTP code returned for type UpdateCaBadRequest
const UpdateCaBadRequestCode int = 400

/*UpdateCaBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response updateCaBadRequest
*/
type UpdateCaBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateCaBadRequest creates UpdateCaBadRequest with default headers values
func NewUpdateCaBadRequest() *UpdateCaBadRequest {

	return &UpdateCaBadRequest{}
}

// WithPayload adds the payload to the update ca bad request response
func (o *UpdateCaBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateCaBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update ca bad request response
func (o *UpdateCaBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCaBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCaUnauthorizedCode is the HTTP code returned for type UpdateCaUnauthorized
const UpdateCaUnauthorizedCode int = 401

/*UpdateCaUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response updateCaUnauthorized
*/
type UpdateCaUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateCaUnauthorized creates UpdateCaUnauthorized with default headers values
func NewUpdateCaUnauthorized() *UpdateCaUnauthorized {

	return &UpdateCaUnauthorized{}
}

// WithPayload adds the payload to the update ca unauthorized response
func (o *UpdateCaUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateCaUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update ca unauthorized response
func (o *UpdateCaUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCaUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCaNotFoundCode is the HTTP code returned for type UpdateCaNotFound
const UpdateCaNotFoundCode int = 404

/*UpdateCaNotFound The requested resource does not exist

swagger:response updateCaNotFound
*/
type UpdateCaNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateCaNotFound creates UpdateCaNotFound with default headers values
func NewUpdateCaNotFound() *UpdateCaNotFound {

	return &UpdateCaNotFound{}
}

// WithPayload adds the payload to the update ca not found response
func (o *UpdateCaNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateCaNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update ca not found response
func (o *UpdateCaNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCaNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCaTooManyRequestsCode is the HTTP code returned for type UpdateCaTooManyRequests
const UpdateCaTooManyRequestsCode int = 429

/*UpdateCaTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response updateCaTooManyRequests
*/
type UpdateCaTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateCaTooManyRequests creates UpdateCaTooManyRequests with default headers values
func NewUpdateCaTooManyRequests() *UpdateCaTooManyRequests {

	return &UpdateCaTooManyRequests{}
}

// WithPayload adds the payload to the update ca too many requests response
func (o *UpdateCaTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateCaTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update ca too many requests response
func (o *UpdateCaTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCaTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCaServiceUnavailableCode is the HTTP code returned for type UpdateCaServiceUnavailable
const UpdateCaServiceUnavailableCode int = 503

/*UpdateCaServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response updateCaServiceUnavailable
*/
type UpdateCaServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateCaServiceUnavailable creates UpdateCaServiceUnavailable with default headers values
func NewUpdateCaServiceUnavailable() *UpdateCaServiceUnavailable {

	return &UpdateCaServiceUnavailable{}
}

// WithPayload adds the payload to the update ca service unavailable response
func (o *UpdateCaServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateCaServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update ca service unavailable response
func (o *UpdateCaServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCaServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
