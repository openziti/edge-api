// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package auth_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// ListAuthPoliciesOKCode is the HTTP code returned for type ListAuthPoliciesOK
const ListAuthPoliciesOKCode int = 200

/*ListAuthPoliciesOK A list of Auth Policies

swagger:response listAuthPoliciesOK
*/
type ListAuthPoliciesOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.ListAuthPoliciesEnvelope `json:"body,omitempty"`
}

// NewListAuthPoliciesOK creates ListAuthPoliciesOK with default headers values
func NewListAuthPoliciesOK() *ListAuthPoliciesOK {

	return &ListAuthPoliciesOK{}
}

// WithPayload adds the payload to the list auth policies o k response
func (o *ListAuthPoliciesOK) WithPayload(payload *rest_model.ListAuthPoliciesEnvelope) *ListAuthPoliciesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list auth policies o k response
func (o *ListAuthPoliciesOK) SetPayload(payload *rest_model.ListAuthPoliciesEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthPoliciesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthPoliciesBadRequestCode is the HTTP code returned for type ListAuthPoliciesBadRequest
const ListAuthPoliciesBadRequestCode int = 400

/*ListAuthPoliciesBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response listAuthPoliciesBadRequest
*/
type ListAuthPoliciesBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthPoliciesBadRequest creates ListAuthPoliciesBadRequest with default headers values
func NewListAuthPoliciesBadRequest() *ListAuthPoliciesBadRequest {

	return &ListAuthPoliciesBadRequest{}
}

// WithPayload adds the payload to the list auth policies bad request response
func (o *ListAuthPoliciesBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthPoliciesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list auth policies bad request response
func (o *ListAuthPoliciesBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthPoliciesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthPoliciesUnauthorizedCode is the HTTP code returned for type ListAuthPoliciesUnauthorized
const ListAuthPoliciesUnauthorizedCode int = 401

/*ListAuthPoliciesUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response listAuthPoliciesUnauthorized
*/
type ListAuthPoliciesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthPoliciesUnauthorized creates ListAuthPoliciesUnauthorized with default headers values
func NewListAuthPoliciesUnauthorized() *ListAuthPoliciesUnauthorized {

	return &ListAuthPoliciesUnauthorized{}
}

// WithPayload adds the payload to the list auth policies unauthorized response
func (o *ListAuthPoliciesUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthPoliciesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list auth policies unauthorized response
func (o *ListAuthPoliciesUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthPoliciesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthPoliciesTooManyRequestsCode is the HTTP code returned for type ListAuthPoliciesTooManyRequests
const ListAuthPoliciesTooManyRequestsCode int = 429

/*ListAuthPoliciesTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response listAuthPoliciesTooManyRequests
*/
type ListAuthPoliciesTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthPoliciesTooManyRequests creates ListAuthPoliciesTooManyRequests with default headers values
func NewListAuthPoliciesTooManyRequests() *ListAuthPoliciesTooManyRequests {

	return &ListAuthPoliciesTooManyRequests{}
}

// WithPayload adds the payload to the list auth policies too many requests response
func (o *ListAuthPoliciesTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthPoliciesTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list auth policies too many requests response
func (o *ListAuthPoliciesTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthPoliciesTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthPoliciesServiceUnavailableCode is the HTTP code returned for type ListAuthPoliciesServiceUnavailable
const ListAuthPoliciesServiceUnavailableCode int = 503

/*ListAuthPoliciesServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response listAuthPoliciesServiceUnavailable
*/
type ListAuthPoliciesServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthPoliciesServiceUnavailable creates ListAuthPoliciesServiceUnavailable with default headers values
func NewListAuthPoliciesServiceUnavailable() *ListAuthPoliciesServiceUnavailable {

	return &ListAuthPoliciesServiceUnavailable{}
}

// WithPayload adds the payload to the list auth policies service unavailable response
func (o *ListAuthPoliciesServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthPoliciesServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list auth policies service unavailable response
func (o *ListAuthPoliciesServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthPoliciesServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
