// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package auth_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// PatchAuthPolicyOKCode is the HTTP code returned for type PatchAuthPolicyOK
const PatchAuthPolicyOKCode int = 200

/*PatchAuthPolicyOK The patch request was successful and the resource has been altered

swagger:response patchAuthPolicyOK
*/
type PatchAuthPolicyOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewPatchAuthPolicyOK creates PatchAuthPolicyOK with default headers values
func NewPatchAuthPolicyOK() *PatchAuthPolicyOK {

	return &PatchAuthPolicyOK{}
}

// WithPayload adds the payload to the patch auth policy o k response
func (o *PatchAuthPolicyOK) WithPayload(payload *rest_model.Empty) *PatchAuthPolicyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch auth policy o k response
func (o *PatchAuthPolicyOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchAuthPolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchAuthPolicyBadRequestCode is the HTTP code returned for type PatchAuthPolicyBadRequest
const PatchAuthPolicyBadRequestCode int = 400

/*PatchAuthPolicyBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response patchAuthPolicyBadRequest
*/
type PatchAuthPolicyBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchAuthPolicyBadRequest creates PatchAuthPolicyBadRequest with default headers values
func NewPatchAuthPolicyBadRequest() *PatchAuthPolicyBadRequest {

	return &PatchAuthPolicyBadRequest{}
}

// WithPayload adds the payload to the patch auth policy bad request response
func (o *PatchAuthPolicyBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchAuthPolicyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch auth policy bad request response
func (o *PatchAuthPolicyBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchAuthPolicyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchAuthPolicyUnauthorizedCode is the HTTP code returned for type PatchAuthPolicyUnauthorized
const PatchAuthPolicyUnauthorizedCode int = 401

/*PatchAuthPolicyUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response patchAuthPolicyUnauthorized
*/
type PatchAuthPolicyUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchAuthPolicyUnauthorized creates PatchAuthPolicyUnauthorized with default headers values
func NewPatchAuthPolicyUnauthorized() *PatchAuthPolicyUnauthorized {

	return &PatchAuthPolicyUnauthorized{}
}

// WithPayload adds the payload to the patch auth policy unauthorized response
func (o *PatchAuthPolicyUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchAuthPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch auth policy unauthorized response
func (o *PatchAuthPolicyUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchAuthPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchAuthPolicyNotFoundCode is the HTTP code returned for type PatchAuthPolicyNotFound
const PatchAuthPolicyNotFoundCode int = 404

/*PatchAuthPolicyNotFound The requested resource does not exist

swagger:response patchAuthPolicyNotFound
*/
type PatchAuthPolicyNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchAuthPolicyNotFound creates PatchAuthPolicyNotFound with default headers values
func NewPatchAuthPolicyNotFound() *PatchAuthPolicyNotFound {

	return &PatchAuthPolicyNotFound{}
}

// WithPayload adds the payload to the patch auth policy not found response
func (o *PatchAuthPolicyNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchAuthPolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch auth policy not found response
func (o *PatchAuthPolicyNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchAuthPolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchAuthPolicyTooManyRequestsCode is the HTTP code returned for type PatchAuthPolicyTooManyRequests
const PatchAuthPolicyTooManyRequestsCode int = 429

/*PatchAuthPolicyTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response patchAuthPolicyTooManyRequests
*/
type PatchAuthPolicyTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchAuthPolicyTooManyRequests creates PatchAuthPolicyTooManyRequests with default headers values
func NewPatchAuthPolicyTooManyRequests() *PatchAuthPolicyTooManyRequests {

	return &PatchAuthPolicyTooManyRequests{}
}

// WithPayload adds the payload to the patch auth policy too many requests response
func (o *PatchAuthPolicyTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchAuthPolicyTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch auth policy too many requests response
func (o *PatchAuthPolicyTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchAuthPolicyTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchAuthPolicyServiceUnavailableCode is the HTTP code returned for type PatchAuthPolicyServiceUnavailable
const PatchAuthPolicyServiceUnavailableCode int = 503

/*PatchAuthPolicyServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response patchAuthPolicyServiceUnavailable
*/
type PatchAuthPolicyServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchAuthPolicyServiceUnavailable creates PatchAuthPolicyServiceUnavailable with default headers values
func NewPatchAuthPolicyServiceUnavailable() *PatchAuthPolicyServiceUnavailable {

	return &PatchAuthPolicyServiceUnavailable{}
}

// WithPayload adds the payload to the patch auth policy service unavailable response
func (o *PatchAuthPolicyServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchAuthPolicyServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch auth policy service unavailable response
func (o *PatchAuthPolicyServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchAuthPolicyServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
