// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package edge_router

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// ListEdgeRoutersOKCode is the HTTP code returned for type ListEdgeRoutersOK
const ListEdgeRoutersOKCode int = 200

/*ListEdgeRoutersOK A list of edge routers

swagger:response listEdgeRoutersOK
*/
type ListEdgeRoutersOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.ListEdgeRoutersEnvelope `json:"body,omitempty"`
}

// NewListEdgeRoutersOK creates ListEdgeRoutersOK with default headers values
func NewListEdgeRoutersOK() *ListEdgeRoutersOK {

	return &ListEdgeRoutersOK{}
}

// WithPayload adds the payload to the list edge routers o k response
func (o *ListEdgeRoutersOK) WithPayload(payload *rest_model.ListEdgeRoutersEnvelope) *ListEdgeRoutersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list edge routers o k response
func (o *ListEdgeRoutersOK) SetPayload(payload *rest_model.ListEdgeRoutersEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListEdgeRoutersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListEdgeRoutersBadRequestCode is the HTTP code returned for type ListEdgeRoutersBadRequest
const ListEdgeRoutersBadRequestCode int = 400

/*ListEdgeRoutersBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response listEdgeRoutersBadRequest
*/
type ListEdgeRoutersBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListEdgeRoutersBadRequest creates ListEdgeRoutersBadRequest with default headers values
func NewListEdgeRoutersBadRequest() *ListEdgeRoutersBadRequest {

	return &ListEdgeRoutersBadRequest{}
}

// WithPayload adds the payload to the list edge routers bad request response
func (o *ListEdgeRoutersBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *ListEdgeRoutersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list edge routers bad request response
func (o *ListEdgeRoutersBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListEdgeRoutersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListEdgeRoutersUnauthorizedCode is the HTTP code returned for type ListEdgeRoutersUnauthorized
const ListEdgeRoutersUnauthorizedCode int = 401

/*ListEdgeRoutersUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response listEdgeRoutersUnauthorized
*/
type ListEdgeRoutersUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListEdgeRoutersUnauthorized creates ListEdgeRoutersUnauthorized with default headers values
func NewListEdgeRoutersUnauthorized() *ListEdgeRoutersUnauthorized {

	return &ListEdgeRoutersUnauthorized{}
}

// WithPayload adds the payload to the list edge routers unauthorized response
func (o *ListEdgeRoutersUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *ListEdgeRoutersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list edge routers unauthorized response
func (o *ListEdgeRoutersUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListEdgeRoutersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListEdgeRoutersTooManyRequestsCode is the HTTP code returned for type ListEdgeRoutersTooManyRequests
const ListEdgeRoutersTooManyRequestsCode int = 429

/*ListEdgeRoutersTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response listEdgeRoutersTooManyRequests
*/
type ListEdgeRoutersTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListEdgeRoutersTooManyRequests creates ListEdgeRoutersTooManyRequests with default headers values
func NewListEdgeRoutersTooManyRequests() *ListEdgeRoutersTooManyRequests {

	return &ListEdgeRoutersTooManyRequests{}
}

// WithPayload adds the payload to the list edge routers too many requests response
func (o *ListEdgeRoutersTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ListEdgeRoutersTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list edge routers too many requests response
func (o *ListEdgeRoutersTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListEdgeRoutersTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListEdgeRoutersServiceUnavailableCode is the HTTP code returned for type ListEdgeRoutersServiceUnavailable
const ListEdgeRoutersServiceUnavailableCode int = 503

/*ListEdgeRoutersServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response listEdgeRoutersServiceUnavailable
*/
type ListEdgeRoutersServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListEdgeRoutersServiceUnavailable creates ListEdgeRoutersServiceUnavailable with default headers values
func NewListEdgeRoutersServiceUnavailable() *ListEdgeRoutersServiceUnavailable {

	return &ListEdgeRoutersServiceUnavailable{}
}

// WithPayload adds the payload to the list edge routers service unavailable response
func (o *ListEdgeRoutersServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ListEdgeRoutersServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list edge routers service unavailable response
func (o *ListEdgeRoutersServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListEdgeRoutersServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
