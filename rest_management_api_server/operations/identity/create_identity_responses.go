// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// CreateIdentityCreatedCode is the HTTP code returned for type CreateIdentityCreated
const CreateIdentityCreatedCode int = 201

/*CreateIdentityCreated The create request was successful and the resource has been added at the following location

swagger:response createIdentityCreated
*/
type CreateIdentityCreated struct {

	/*
	  In: Body
	*/
	Payload *rest_model.CreateEnvelope `json:"body,omitempty"`
}

// NewCreateIdentityCreated creates CreateIdentityCreated with default headers values
func NewCreateIdentityCreated() *CreateIdentityCreated {

	return &CreateIdentityCreated{}
}

// WithPayload adds the payload to the create identity created response
func (o *CreateIdentityCreated) WithPayload(payload *rest_model.CreateEnvelope) *CreateIdentityCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create identity created response
func (o *CreateIdentityCreated) SetPayload(payload *rest_model.CreateEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIdentityCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateIdentityBadRequestCode is the HTTP code returned for type CreateIdentityBadRequest
const CreateIdentityBadRequestCode int = 400

/*CreateIdentityBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response createIdentityBadRequest
*/
type CreateIdentityBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewCreateIdentityBadRequest creates CreateIdentityBadRequest with default headers values
func NewCreateIdentityBadRequest() *CreateIdentityBadRequest {

	return &CreateIdentityBadRequest{}
}

// WithPayload adds the payload to the create identity bad request response
func (o *CreateIdentityBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *CreateIdentityBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create identity bad request response
func (o *CreateIdentityBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIdentityBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateIdentityUnauthorizedCode is the HTTP code returned for type CreateIdentityUnauthorized
const CreateIdentityUnauthorizedCode int = 401

/*CreateIdentityUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response createIdentityUnauthorized
*/
type CreateIdentityUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewCreateIdentityUnauthorized creates CreateIdentityUnauthorized with default headers values
func NewCreateIdentityUnauthorized() *CreateIdentityUnauthorized {

	return &CreateIdentityUnauthorized{}
}

// WithPayload adds the payload to the create identity unauthorized response
func (o *CreateIdentityUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *CreateIdentityUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create identity unauthorized response
func (o *CreateIdentityUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIdentityUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateIdentityTooManyRequestsCode is the HTTP code returned for type CreateIdentityTooManyRequests
const CreateIdentityTooManyRequestsCode int = 429

/*CreateIdentityTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response createIdentityTooManyRequests
*/
type CreateIdentityTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewCreateIdentityTooManyRequests creates CreateIdentityTooManyRequests with default headers values
func NewCreateIdentityTooManyRequests() *CreateIdentityTooManyRequests {

	return &CreateIdentityTooManyRequests{}
}

// WithPayload adds the payload to the create identity too many requests response
func (o *CreateIdentityTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *CreateIdentityTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create identity too many requests response
func (o *CreateIdentityTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIdentityTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateIdentityServiceUnavailableCode is the HTTP code returned for type CreateIdentityServiceUnavailable
const CreateIdentityServiceUnavailableCode int = 503

/*CreateIdentityServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response createIdentityServiceUnavailable
*/
type CreateIdentityServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewCreateIdentityServiceUnavailable creates CreateIdentityServiceUnavailable with default headers values
func NewCreateIdentityServiceUnavailable() *CreateIdentityServiceUnavailable {

	return &CreateIdentityServiceUnavailable{}
}

// WithPayload adds the payload to the create identity service unavailable response
func (o *CreateIdentityServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *CreateIdentityServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create identity service unavailable response
func (o *CreateIdentityServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIdentityServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
