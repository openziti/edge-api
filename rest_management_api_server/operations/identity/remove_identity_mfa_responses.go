// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// RemoveIdentityMfaOKCode is the HTTP code returned for type RemoveIdentityMfaOK
const RemoveIdentityMfaOKCode int = 200

/*RemoveIdentityMfaOK Base empty response

swagger:response removeIdentityMfaOK
*/
type RemoveIdentityMfaOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewRemoveIdentityMfaOK creates RemoveIdentityMfaOK with default headers values
func NewRemoveIdentityMfaOK() *RemoveIdentityMfaOK {

	return &RemoveIdentityMfaOK{}
}

// WithPayload adds the payload to the remove identity mfa o k response
func (o *RemoveIdentityMfaOK) WithPayload(payload *rest_model.Empty) *RemoveIdentityMfaOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove identity mfa o k response
func (o *RemoveIdentityMfaOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveIdentityMfaOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveIdentityMfaUnauthorizedCode is the HTTP code returned for type RemoveIdentityMfaUnauthorized
const RemoveIdentityMfaUnauthorizedCode int = 401

/*RemoveIdentityMfaUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response removeIdentityMfaUnauthorized
*/
type RemoveIdentityMfaUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRemoveIdentityMfaUnauthorized creates RemoveIdentityMfaUnauthorized with default headers values
func NewRemoveIdentityMfaUnauthorized() *RemoveIdentityMfaUnauthorized {

	return &RemoveIdentityMfaUnauthorized{}
}

// WithPayload adds the payload to the remove identity mfa unauthorized response
func (o *RemoveIdentityMfaUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *RemoveIdentityMfaUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove identity mfa unauthorized response
func (o *RemoveIdentityMfaUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveIdentityMfaUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveIdentityMfaNotFoundCode is the HTTP code returned for type RemoveIdentityMfaNotFound
const RemoveIdentityMfaNotFoundCode int = 404

/*RemoveIdentityMfaNotFound The requested resource does not exist

swagger:response removeIdentityMfaNotFound
*/
type RemoveIdentityMfaNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRemoveIdentityMfaNotFound creates RemoveIdentityMfaNotFound with default headers values
func NewRemoveIdentityMfaNotFound() *RemoveIdentityMfaNotFound {

	return &RemoveIdentityMfaNotFound{}
}

// WithPayload adds the payload to the remove identity mfa not found response
func (o *RemoveIdentityMfaNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *RemoveIdentityMfaNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove identity mfa not found response
func (o *RemoveIdentityMfaNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveIdentityMfaNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveIdentityMfaTooManyRequestsCode is the HTTP code returned for type RemoveIdentityMfaTooManyRequests
const RemoveIdentityMfaTooManyRequestsCode int = 429

/*RemoveIdentityMfaTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response removeIdentityMfaTooManyRequests
*/
type RemoveIdentityMfaTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRemoveIdentityMfaTooManyRequests creates RemoveIdentityMfaTooManyRequests with default headers values
func NewRemoveIdentityMfaTooManyRequests() *RemoveIdentityMfaTooManyRequests {

	return &RemoveIdentityMfaTooManyRequests{}
}

// WithPayload adds the payload to the remove identity mfa too many requests response
func (o *RemoveIdentityMfaTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *RemoveIdentityMfaTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove identity mfa too many requests response
func (o *RemoveIdentityMfaTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveIdentityMfaTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveIdentityMfaServiceUnavailableCode is the HTTP code returned for type RemoveIdentityMfaServiceUnavailable
const RemoveIdentityMfaServiceUnavailableCode int = 503

/*RemoveIdentityMfaServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response removeIdentityMfaServiceUnavailable
*/
type RemoveIdentityMfaServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRemoveIdentityMfaServiceUnavailable creates RemoveIdentityMfaServiceUnavailable with default headers values
func NewRemoveIdentityMfaServiceUnavailable() *RemoveIdentityMfaServiceUnavailable {

	return &RemoveIdentityMfaServiceUnavailable{}
}

// WithPayload adds the payload to the remove identity mfa service unavailable response
func (o *RemoveIdentityMfaServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *RemoveIdentityMfaServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove identity mfa service unavailable response
func (o *RemoveIdentityMfaServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveIdentityMfaServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
