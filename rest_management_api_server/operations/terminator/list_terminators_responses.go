// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package terminator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// ListTerminatorsOKCode is the HTTP code returned for type ListTerminatorsOK
const ListTerminatorsOKCode int = 200

/*ListTerminatorsOK A list of terminators

swagger:response listTerminatorsOK
*/
type ListTerminatorsOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.ListTerminatorsEnvelope `json:"body,omitempty"`
}

// NewListTerminatorsOK creates ListTerminatorsOK with default headers values
func NewListTerminatorsOK() *ListTerminatorsOK {

	return &ListTerminatorsOK{}
}

// WithPayload adds the payload to the list terminators o k response
func (o *ListTerminatorsOK) WithPayload(payload *rest_model.ListTerminatorsEnvelope) *ListTerminatorsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list terminators o k response
func (o *ListTerminatorsOK) SetPayload(payload *rest_model.ListTerminatorsEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTerminatorsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTerminatorsBadRequestCode is the HTTP code returned for type ListTerminatorsBadRequest
const ListTerminatorsBadRequestCode int = 400

/*ListTerminatorsBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response listTerminatorsBadRequest
*/
type ListTerminatorsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListTerminatorsBadRequest creates ListTerminatorsBadRequest with default headers values
func NewListTerminatorsBadRequest() *ListTerminatorsBadRequest {

	return &ListTerminatorsBadRequest{}
}

// WithPayload adds the payload to the list terminators bad request response
func (o *ListTerminatorsBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *ListTerminatorsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list terminators bad request response
func (o *ListTerminatorsBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTerminatorsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTerminatorsUnauthorizedCode is the HTTP code returned for type ListTerminatorsUnauthorized
const ListTerminatorsUnauthorizedCode int = 401

/*ListTerminatorsUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response listTerminatorsUnauthorized
*/
type ListTerminatorsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListTerminatorsUnauthorized creates ListTerminatorsUnauthorized with default headers values
func NewListTerminatorsUnauthorized() *ListTerminatorsUnauthorized {

	return &ListTerminatorsUnauthorized{}
}

// WithPayload adds the payload to the list terminators unauthorized response
func (o *ListTerminatorsUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *ListTerminatorsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list terminators unauthorized response
func (o *ListTerminatorsUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTerminatorsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTerminatorsTooManyRequestsCode is the HTTP code returned for type ListTerminatorsTooManyRequests
const ListTerminatorsTooManyRequestsCode int = 429

/*ListTerminatorsTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response listTerminatorsTooManyRequests
*/
type ListTerminatorsTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListTerminatorsTooManyRequests creates ListTerminatorsTooManyRequests with default headers values
func NewListTerminatorsTooManyRequests() *ListTerminatorsTooManyRequests {

	return &ListTerminatorsTooManyRequests{}
}

// WithPayload adds the payload to the list terminators too many requests response
func (o *ListTerminatorsTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ListTerminatorsTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list terminators too many requests response
func (o *ListTerminatorsTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTerminatorsTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListTerminatorsServiceUnavailableCode is the HTTP code returned for type ListTerminatorsServiceUnavailable
const ListTerminatorsServiceUnavailableCode int = 503

/*ListTerminatorsServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response listTerminatorsServiceUnavailable
*/
type ListTerminatorsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListTerminatorsServiceUnavailable creates ListTerminatorsServiceUnavailable with default headers values
func NewListTerminatorsServiceUnavailable() *ListTerminatorsServiceUnavailable {

	return &ListTerminatorsServiceUnavailable{}
}

// WithPayload adds the payload to the list terminators service unavailable response
func (o *ListTerminatorsServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ListTerminatorsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list terminators service unavailable response
func (o *ListTerminatorsServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListTerminatorsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
