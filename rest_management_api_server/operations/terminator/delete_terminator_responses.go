// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package terminator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// DeleteTerminatorOKCode is the HTTP code returned for type DeleteTerminatorOK
const DeleteTerminatorOKCode int = 200

/*DeleteTerminatorOK The delete request was successful and the resource has been removed

swagger:response deleteTerminatorOK
*/
type DeleteTerminatorOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewDeleteTerminatorOK creates DeleteTerminatorOK with default headers values
func NewDeleteTerminatorOK() *DeleteTerminatorOK {

	return &DeleteTerminatorOK{}
}

// WithPayload adds the payload to the delete terminator o k response
func (o *DeleteTerminatorOK) WithPayload(payload *rest_model.Empty) *DeleteTerminatorOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator o k response
func (o *DeleteTerminatorOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTerminatorBadRequestCode is the HTTP code returned for type DeleteTerminatorBadRequest
const DeleteTerminatorBadRequestCode int = 400

/*DeleteTerminatorBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response deleteTerminatorBadRequest
*/
type DeleteTerminatorBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteTerminatorBadRequest creates DeleteTerminatorBadRequest with default headers values
func NewDeleteTerminatorBadRequest() *DeleteTerminatorBadRequest {

	return &DeleteTerminatorBadRequest{}
}

// WithPayload adds the payload to the delete terminator bad request response
func (o *DeleteTerminatorBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteTerminatorBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator bad request response
func (o *DeleteTerminatorBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTerminatorUnauthorizedCode is the HTTP code returned for type DeleteTerminatorUnauthorized
const DeleteTerminatorUnauthorizedCode int = 401

/*DeleteTerminatorUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response deleteTerminatorUnauthorized
*/
type DeleteTerminatorUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteTerminatorUnauthorized creates DeleteTerminatorUnauthorized with default headers values
func NewDeleteTerminatorUnauthorized() *DeleteTerminatorUnauthorized {

	return &DeleteTerminatorUnauthorized{}
}

// WithPayload adds the payload to the delete terminator unauthorized response
func (o *DeleteTerminatorUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteTerminatorUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator unauthorized response
func (o *DeleteTerminatorUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTerminatorNotFoundCode is the HTTP code returned for type DeleteTerminatorNotFound
const DeleteTerminatorNotFoundCode int = 404

/*DeleteTerminatorNotFound The requested resource does not exist

swagger:response deleteTerminatorNotFound
*/
type DeleteTerminatorNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteTerminatorNotFound creates DeleteTerminatorNotFound with default headers values
func NewDeleteTerminatorNotFound() *DeleteTerminatorNotFound {

	return &DeleteTerminatorNotFound{}
}

// WithPayload adds the payload to the delete terminator not found response
func (o *DeleteTerminatorNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteTerminatorNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator not found response
func (o *DeleteTerminatorNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTerminatorConflictCode is the HTTP code returned for type DeleteTerminatorConflict
const DeleteTerminatorConflictCode int = 409

/*DeleteTerminatorConflict The resource requested to be removed/altered cannot be as it is referenced by another object.

swagger:response deleteTerminatorConflict
*/
type DeleteTerminatorConflict struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteTerminatorConflict creates DeleteTerminatorConflict with default headers values
func NewDeleteTerminatorConflict() *DeleteTerminatorConflict {

	return &DeleteTerminatorConflict{}
}

// WithPayload adds the payload to the delete terminator conflict response
func (o *DeleteTerminatorConflict) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteTerminatorConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator conflict response
func (o *DeleteTerminatorConflict) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTerminatorTooManyRequestsCode is the HTTP code returned for type DeleteTerminatorTooManyRequests
const DeleteTerminatorTooManyRequestsCode int = 429

/*DeleteTerminatorTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response deleteTerminatorTooManyRequests
*/
type DeleteTerminatorTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteTerminatorTooManyRequests creates DeleteTerminatorTooManyRequests with default headers values
func NewDeleteTerminatorTooManyRequests() *DeleteTerminatorTooManyRequests {

	return &DeleteTerminatorTooManyRequests{}
}

// WithPayload adds the payload to the delete terminator too many requests response
func (o *DeleteTerminatorTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteTerminatorTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator too many requests response
func (o *DeleteTerminatorTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTerminatorServiceUnavailableCode is the HTTP code returned for type DeleteTerminatorServiceUnavailable
const DeleteTerminatorServiceUnavailableCode int = 503

/*DeleteTerminatorServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response deleteTerminatorServiceUnavailable
*/
type DeleteTerminatorServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteTerminatorServiceUnavailable creates DeleteTerminatorServiceUnavailable with default headers values
func NewDeleteTerminatorServiceUnavailable() *DeleteTerminatorServiceUnavailable {

	return &DeleteTerminatorServiceUnavailable{}
}

// WithPayload adds the payload to the delete terminator service unavailable response
func (o *DeleteTerminatorServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteTerminatorServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete terminator service unavailable response
func (o *DeleteTerminatorServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTerminatorServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
