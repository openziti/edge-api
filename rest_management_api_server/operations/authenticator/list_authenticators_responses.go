// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package authenticator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// ListAuthenticatorsOKCode is the HTTP code returned for type ListAuthenticatorsOK
const ListAuthenticatorsOKCode int = 200

/*ListAuthenticatorsOK A list of authenticators

swagger:response listAuthenticatorsOK
*/
type ListAuthenticatorsOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.ListAuthenticatorsEnvelope `json:"body,omitempty"`
}

// NewListAuthenticatorsOK creates ListAuthenticatorsOK with default headers values
func NewListAuthenticatorsOK() *ListAuthenticatorsOK {

	return &ListAuthenticatorsOK{}
}

// WithPayload adds the payload to the list authenticators o k response
func (o *ListAuthenticatorsOK) WithPayload(payload *rest_model.ListAuthenticatorsEnvelope) *ListAuthenticatorsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list authenticators o k response
func (o *ListAuthenticatorsOK) SetPayload(payload *rest_model.ListAuthenticatorsEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthenticatorsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthenticatorsBadRequestCode is the HTTP code returned for type ListAuthenticatorsBadRequest
const ListAuthenticatorsBadRequestCode int = 400

/*ListAuthenticatorsBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response listAuthenticatorsBadRequest
*/
type ListAuthenticatorsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthenticatorsBadRequest creates ListAuthenticatorsBadRequest with default headers values
func NewListAuthenticatorsBadRequest() *ListAuthenticatorsBadRequest {

	return &ListAuthenticatorsBadRequest{}
}

// WithPayload adds the payload to the list authenticators bad request response
func (o *ListAuthenticatorsBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthenticatorsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list authenticators bad request response
func (o *ListAuthenticatorsBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthenticatorsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthenticatorsUnauthorizedCode is the HTTP code returned for type ListAuthenticatorsUnauthorized
const ListAuthenticatorsUnauthorizedCode int = 401

/*ListAuthenticatorsUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response listAuthenticatorsUnauthorized
*/
type ListAuthenticatorsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthenticatorsUnauthorized creates ListAuthenticatorsUnauthorized with default headers values
func NewListAuthenticatorsUnauthorized() *ListAuthenticatorsUnauthorized {

	return &ListAuthenticatorsUnauthorized{}
}

// WithPayload adds the payload to the list authenticators unauthorized response
func (o *ListAuthenticatorsUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthenticatorsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list authenticators unauthorized response
func (o *ListAuthenticatorsUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthenticatorsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthenticatorsTooManyRequestsCode is the HTTP code returned for type ListAuthenticatorsTooManyRequests
const ListAuthenticatorsTooManyRequestsCode int = 429

/*ListAuthenticatorsTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response listAuthenticatorsTooManyRequests
*/
type ListAuthenticatorsTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthenticatorsTooManyRequests creates ListAuthenticatorsTooManyRequests with default headers values
func NewListAuthenticatorsTooManyRequests() *ListAuthenticatorsTooManyRequests {

	return &ListAuthenticatorsTooManyRequests{}
}

// WithPayload adds the payload to the list authenticators too many requests response
func (o *ListAuthenticatorsTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthenticatorsTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list authenticators too many requests response
func (o *ListAuthenticatorsTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthenticatorsTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAuthenticatorsServiceUnavailableCode is the HTTP code returned for type ListAuthenticatorsServiceUnavailable
const ListAuthenticatorsServiceUnavailableCode int = 503

/*ListAuthenticatorsServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response listAuthenticatorsServiceUnavailable
*/
type ListAuthenticatorsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAuthenticatorsServiceUnavailable creates ListAuthenticatorsServiceUnavailable with default headers values
func NewListAuthenticatorsServiceUnavailable() *ListAuthenticatorsServiceUnavailable {

	return &ListAuthenticatorsServiceUnavailable{}
}

// WithPayload adds the payload to the list authenticators service unavailable response
func (o *ListAuthenticatorsServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAuthenticatorsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list authenticators service unavailable response
func (o *ListAuthenticatorsServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAuthenticatorsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
