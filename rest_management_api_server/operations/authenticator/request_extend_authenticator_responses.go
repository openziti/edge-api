// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package authenticator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// RequestExtendAuthenticatorOKCode is the HTTP code returned for type RequestExtendAuthenticatorOK
const RequestExtendAuthenticatorOKCode int = 200

/*RequestExtendAuthenticatorOK Base empty response

swagger:response requestExtendAuthenticatorOK
*/
type RequestExtendAuthenticatorOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewRequestExtendAuthenticatorOK creates RequestExtendAuthenticatorOK with default headers values
func NewRequestExtendAuthenticatorOK() *RequestExtendAuthenticatorOK {

	return &RequestExtendAuthenticatorOK{}
}

// WithPayload adds the payload to the request extend authenticator o k response
func (o *RequestExtendAuthenticatorOK) WithPayload(payload *rest_model.Empty) *RequestExtendAuthenticatorOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request extend authenticator o k response
func (o *RequestExtendAuthenticatorOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestExtendAuthenticatorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestExtendAuthenticatorUnauthorizedCode is the HTTP code returned for type RequestExtendAuthenticatorUnauthorized
const RequestExtendAuthenticatorUnauthorizedCode int = 401

/*RequestExtendAuthenticatorUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response requestExtendAuthenticatorUnauthorized
*/
type RequestExtendAuthenticatorUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRequestExtendAuthenticatorUnauthorized creates RequestExtendAuthenticatorUnauthorized with default headers values
func NewRequestExtendAuthenticatorUnauthorized() *RequestExtendAuthenticatorUnauthorized {

	return &RequestExtendAuthenticatorUnauthorized{}
}

// WithPayload adds the payload to the request extend authenticator unauthorized response
func (o *RequestExtendAuthenticatorUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *RequestExtendAuthenticatorUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request extend authenticator unauthorized response
func (o *RequestExtendAuthenticatorUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestExtendAuthenticatorUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestExtendAuthenticatorForbiddenCode is the HTTP code returned for type RequestExtendAuthenticatorForbidden
const RequestExtendAuthenticatorForbiddenCode int = 403

/*RequestExtendAuthenticatorForbidden The request could not be completed and will never complete due to unchangeable state or conflicts.

swagger:response requestExtendAuthenticatorForbidden
*/
type RequestExtendAuthenticatorForbidden struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRequestExtendAuthenticatorForbidden creates RequestExtendAuthenticatorForbidden with default headers values
func NewRequestExtendAuthenticatorForbidden() *RequestExtendAuthenticatorForbidden {

	return &RequestExtendAuthenticatorForbidden{}
}

// WithPayload adds the payload to the request extend authenticator forbidden response
func (o *RequestExtendAuthenticatorForbidden) WithPayload(payload *rest_model.APIErrorEnvelope) *RequestExtendAuthenticatorForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request extend authenticator forbidden response
func (o *RequestExtendAuthenticatorForbidden) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestExtendAuthenticatorForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestExtendAuthenticatorNotFoundCode is the HTTP code returned for type RequestExtendAuthenticatorNotFound
const RequestExtendAuthenticatorNotFoundCode int = 404

/*RequestExtendAuthenticatorNotFound The requested resource does not exist

swagger:response requestExtendAuthenticatorNotFound
*/
type RequestExtendAuthenticatorNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRequestExtendAuthenticatorNotFound creates RequestExtendAuthenticatorNotFound with default headers values
func NewRequestExtendAuthenticatorNotFound() *RequestExtendAuthenticatorNotFound {

	return &RequestExtendAuthenticatorNotFound{}
}

// WithPayload adds the payload to the request extend authenticator not found response
func (o *RequestExtendAuthenticatorNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *RequestExtendAuthenticatorNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request extend authenticator not found response
func (o *RequestExtendAuthenticatorNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestExtendAuthenticatorNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestExtendAuthenticatorTooManyRequestsCode is the HTTP code returned for type RequestExtendAuthenticatorTooManyRequests
const RequestExtendAuthenticatorTooManyRequestsCode int = 429

/*RequestExtendAuthenticatorTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response requestExtendAuthenticatorTooManyRequests
*/
type RequestExtendAuthenticatorTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRequestExtendAuthenticatorTooManyRequests creates RequestExtendAuthenticatorTooManyRequests with default headers values
func NewRequestExtendAuthenticatorTooManyRequests() *RequestExtendAuthenticatorTooManyRequests {

	return &RequestExtendAuthenticatorTooManyRequests{}
}

// WithPayload adds the payload to the request extend authenticator too many requests response
func (o *RequestExtendAuthenticatorTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *RequestExtendAuthenticatorTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request extend authenticator too many requests response
func (o *RequestExtendAuthenticatorTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestExtendAuthenticatorTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestExtendAuthenticatorServiceUnavailableCode is the HTTP code returned for type RequestExtendAuthenticatorServiceUnavailable
const RequestExtendAuthenticatorServiceUnavailableCode int = 503

/*RequestExtendAuthenticatorServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response requestExtendAuthenticatorServiceUnavailable
*/
type RequestExtendAuthenticatorServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRequestExtendAuthenticatorServiceUnavailable creates RequestExtendAuthenticatorServiceUnavailable with default headers values
func NewRequestExtendAuthenticatorServiceUnavailable() *RequestExtendAuthenticatorServiceUnavailable {

	return &RequestExtendAuthenticatorServiceUnavailable{}
}

// WithPayload adds the payload to the request extend authenticator service unavailable response
func (o *RequestExtendAuthenticatorServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *RequestExtendAuthenticatorServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request extend authenticator service unavailable response
func (o *RequestExtendAuthenticatorServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestExtendAuthenticatorServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
