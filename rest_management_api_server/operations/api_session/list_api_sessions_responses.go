// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package api_session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// ListAPISessionsOKCode is the HTTP code returned for type ListAPISessionsOK
const ListAPISessionsOKCode int = 200

/*ListAPISessionsOK A list of active API Sessions

swagger:response listApiSessionsOK
*/
type ListAPISessionsOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.ListAPISessionsEnvelope `json:"body,omitempty"`
}

// NewListAPISessionsOK creates ListAPISessionsOK with default headers values
func NewListAPISessionsOK() *ListAPISessionsOK {

	return &ListAPISessionsOK{}
}

// WithPayload adds the payload to the list Api sessions o k response
func (o *ListAPISessionsOK) WithPayload(payload *rest_model.ListAPISessionsEnvelope) *ListAPISessionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list Api sessions o k response
func (o *ListAPISessionsOK) SetPayload(payload *rest_model.ListAPISessionsEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAPISessionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAPISessionsBadRequestCode is the HTTP code returned for type ListAPISessionsBadRequest
const ListAPISessionsBadRequestCode int = 400

/*ListAPISessionsBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response listApiSessionsBadRequest
*/
type ListAPISessionsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAPISessionsBadRequest creates ListAPISessionsBadRequest with default headers values
func NewListAPISessionsBadRequest() *ListAPISessionsBadRequest {

	return &ListAPISessionsBadRequest{}
}

// WithPayload adds the payload to the list Api sessions bad request response
func (o *ListAPISessionsBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAPISessionsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list Api sessions bad request response
func (o *ListAPISessionsBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAPISessionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAPISessionsUnauthorizedCode is the HTTP code returned for type ListAPISessionsUnauthorized
const ListAPISessionsUnauthorizedCode int = 401

/*ListAPISessionsUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response listApiSessionsUnauthorized
*/
type ListAPISessionsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAPISessionsUnauthorized creates ListAPISessionsUnauthorized with default headers values
func NewListAPISessionsUnauthorized() *ListAPISessionsUnauthorized {

	return &ListAPISessionsUnauthorized{}
}

// WithPayload adds the payload to the list Api sessions unauthorized response
func (o *ListAPISessionsUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAPISessionsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list Api sessions unauthorized response
func (o *ListAPISessionsUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAPISessionsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAPISessionsTooManyRequestsCode is the HTTP code returned for type ListAPISessionsTooManyRequests
const ListAPISessionsTooManyRequestsCode int = 429

/*ListAPISessionsTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response listApiSessionsTooManyRequests
*/
type ListAPISessionsTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAPISessionsTooManyRequests creates ListAPISessionsTooManyRequests with default headers values
func NewListAPISessionsTooManyRequests() *ListAPISessionsTooManyRequests {

	return &ListAPISessionsTooManyRequests{}
}

// WithPayload adds the payload to the list Api sessions too many requests response
func (o *ListAPISessionsTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAPISessionsTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list Api sessions too many requests response
func (o *ListAPISessionsTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAPISessionsTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAPISessionsServiceUnavailableCode is the HTTP code returned for type ListAPISessionsServiceUnavailable
const ListAPISessionsServiceUnavailableCode int = 503

/*ListAPISessionsServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response listApiSessionsServiceUnavailable
*/
type ListAPISessionsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewListAPISessionsServiceUnavailable creates ListAPISessionsServiceUnavailable with default headers values
func NewListAPISessionsServiceUnavailable() *ListAPISessionsServiceUnavailable {

	return &ListAPISessionsServiceUnavailable{}
}

// WithPayload adds the payload to the list Api sessions service unavailable response
func (o *ListAPISessionsServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *ListAPISessionsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list Api sessions service unavailable response
func (o *ListAPISessionsServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAPISessionsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
