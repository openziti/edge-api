// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package ascode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExportAscodeHandlerFunc turns a function with the right signature into a export ascode handler
type ExportAscodeHandlerFunc func(ExportAscodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExportAscodeHandlerFunc) Handle(params ExportAscodeParams) middleware.Responder {
	return fn(params)
}

// ExportAscodeHandler interface for that can handle valid export ascode params
type ExportAscodeHandler interface {
	Handle(ExportAscodeParams) middleware.Responder
}

// NewExportAscode creates a new http.Handler for the export ascode operation
func NewExportAscode(ctx *middleware.Context, handler ExportAscodeHandler) *ExportAscode {
	return &ExportAscode{Context: ctx, Handler: handler}
}

/* ExportAscode swagger:route POST /ascode/export Ascode exportAscode

Export network bundle

*/
type ExportAscode struct {
	Context *middleware.Context
	Handler ExportAscodeHandler
}

func (o *ExportAscode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewExportAscodeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ExportAscodeBody export ascode body
//
// swagger:model ExportAscodeBody
type ExportAscodeBody struct {

	// format
	// Enum: [yaml json]
	Format string `json:"format,omitempty"`

	// types
	Types string `json:"types,omitempty"`
}

// Validate validates this export ascode body
func (o *ExportAscodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var exportAscodeBodyTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yaml","json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exportAscodeBodyTypeFormatPropEnum = append(exportAscodeBodyTypeFormatPropEnum, v)
	}
}

const (

	// ExportAscodeBodyFormatYaml captures enum value "yaml"
	ExportAscodeBodyFormatYaml string = "yaml"

	// ExportAscodeBodyFormatJSON captures enum value "json"
	ExportAscodeBodyFormatJSON string = "json"
)

// prop value enum
func (o *ExportAscodeBody) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, exportAscodeBodyTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ExportAscodeBody) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.Format) { // not required
		return nil
	}

	// value enum
	if err := o.validateFormatEnum("exportRequest"+"."+"format", "body", o.Format); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this export ascode body based on context it is used
func (o *ExportAscodeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExportAscodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExportAscodeBody) UnmarshalBinary(b []byte) error {
	var res ExportAscodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
