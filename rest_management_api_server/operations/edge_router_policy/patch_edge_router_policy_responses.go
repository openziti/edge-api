// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package edge_router_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// PatchEdgeRouterPolicyOKCode is the HTTP code returned for type PatchEdgeRouterPolicyOK
const PatchEdgeRouterPolicyOKCode int = 200

/*PatchEdgeRouterPolicyOK The patch request was successful and the resource has been altered

swagger:response patchEdgeRouterPolicyOK
*/
type PatchEdgeRouterPolicyOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewPatchEdgeRouterPolicyOK creates PatchEdgeRouterPolicyOK with default headers values
func NewPatchEdgeRouterPolicyOK() *PatchEdgeRouterPolicyOK {

	return &PatchEdgeRouterPolicyOK{}
}

// WithPayload adds the payload to the patch edge router policy o k response
func (o *PatchEdgeRouterPolicyOK) WithPayload(payload *rest_model.Empty) *PatchEdgeRouterPolicyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch edge router policy o k response
func (o *PatchEdgeRouterPolicyOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchEdgeRouterPolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchEdgeRouterPolicyBadRequestCode is the HTTP code returned for type PatchEdgeRouterPolicyBadRequest
const PatchEdgeRouterPolicyBadRequestCode int = 400

/*PatchEdgeRouterPolicyBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response patchEdgeRouterPolicyBadRequest
*/
type PatchEdgeRouterPolicyBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchEdgeRouterPolicyBadRequest creates PatchEdgeRouterPolicyBadRequest with default headers values
func NewPatchEdgeRouterPolicyBadRequest() *PatchEdgeRouterPolicyBadRequest {

	return &PatchEdgeRouterPolicyBadRequest{}
}

// WithPayload adds the payload to the patch edge router policy bad request response
func (o *PatchEdgeRouterPolicyBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchEdgeRouterPolicyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch edge router policy bad request response
func (o *PatchEdgeRouterPolicyBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchEdgeRouterPolicyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchEdgeRouterPolicyUnauthorizedCode is the HTTP code returned for type PatchEdgeRouterPolicyUnauthorized
const PatchEdgeRouterPolicyUnauthorizedCode int = 401

/*PatchEdgeRouterPolicyUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response patchEdgeRouterPolicyUnauthorized
*/
type PatchEdgeRouterPolicyUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchEdgeRouterPolicyUnauthorized creates PatchEdgeRouterPolicyUnauthorized with default headers values
func NewPatchEdgeRouterPolicyUnauthorized() *PatchEdgeRouterPolicyUnauthorized {

	return &PatchEdgeRouterPolicyUnauthorized{}
}

// WithPayload adds the payload to the patch edge router policy unauthorized response
func (o *PatchEdgeRouterPolicyUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchEdgeRouterPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch edge router policy unauthorized response
func (o *PatchEdgeRouterPolicyUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchEdgeRouterPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchEdgeRouterPolicyNotFoundCode is the HTTP code returned for type PatchEdgeRouterPolicyNotFound
const PatchEdgeRouterPolicyNotFoundCode int = 404

/*PatchEdgeRouterPolicyNotFound The requested resource does not exist

swagger:response patchEdgeRouterPolicyNotFound
*/
type PatchEdgeRouterPolicyNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchEdgeRouterPolicyNotFound creates PatchEdgeRouterPolicyNotFound with default headers values
func NewPatchEdgeRouterPolicyNotFound() *PatchEdgeRouterPolicyNotFound {

	return &PatchEdgeRouterPolicyNotFound{}
}

// WithPayload adds the payload to the patch edge router policy not found response
func (o *PatchEdgeRouterPolicyNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchEdgeRouterPolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch edge router policy not found response
func (o *PatchEdgeRouterPolicyNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchEdgeRouterPolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchEdgeRouterPolicyTooManyRequestsCode is the HTTP code returned for type PatchEdgeRouterPolicyTooManyRequests
const PatchEdgeRouterPolicyTooManyRequestsCode int = 429

/*PatchEdgeRouterPolicyTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response patchEdgeRouterPolicyTooManyRequests
*/
type PatchEdgeRouterPolicyTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchEdgeRouterPolicyTooManyRequests creates PatchEdgeRouterPolicyTooManyRequests with default headers values
func NewPatchEdgeRouterPolicyTooManyRequests() *PatchEdgeRouterPolicyTooManyRequests {

	return &PatchEdgeRouterPolicyTooManyRequests{}
}

// WithPayload adds the payload to the patch edge router policy too many requests response
func (o *PatchEdgeRouterPolicyTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchEdgeRouterPolicyTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch edge router policy too many requests response
func (o *PatchEdgeRouterPolicyTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchEdgeRouterPolicyTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchEdgeRouterPolicyServiceUnavailableCode is the HTTP code returned for type PatchEdgeRouterPolicyServiceUnavailable
const PatchEdgeRouterPolicyServiceUnavailableCode int = 503

/*PatchEdgeRouterPolicyServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response patchEdgeRouterPolicyServiceUnavailable
*/
type PatchEdgeRouterPolicyServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchEdgeRouterPolicyServiceUnavailable creates PatchEdgeRouterPolicyServiceUnavailable with default headers values
func NewPatchEdgeRouterPolicyServiceUnavailable() *PatchEdgeRouterPolicyServiceUnavailable {

	return &PatchEdgeRouterPolicyServiceUnavailable{}
}

// WithPayload adds the payload to the patch edge router policy service unavailable response
func (o *PatchEdgeRouterPolicyServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchEdgeRouterPolicyServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch edge router policy service unavailable response
func (o *PatchEdgeRouterPolicyServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchEdgeRouterPolicyServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
