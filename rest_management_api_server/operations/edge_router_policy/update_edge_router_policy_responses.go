// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package edge_router_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// UpdateEdgeRouterPolicyOKCode is the HTTP code returned for type UpdateEdgeRouterPolicyOK
const UpdateEdgeRouterPolicyOKCode int = 200

/*UpdateEdgeRouterPolicyOK The update request was successful and the resource has been altered

swagger:response updateEdgeRouterPolicyOK
*/
type UpdateEdgeRouterPolicyOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewUpdateEdgeRouterPolicyOK creates UpdateEdgeRouterPolicyOK with default headers values
func NewUpdateEdgeRouterPolicyOK() *UpdateEdgeRouterPolicyOK {

	return &UpdateEdgeRouterPolicyOK{}
}

// WithPayload adds the payload to the update edge router policy o k response
func (o *UpdateEdgeRouterPolicyOK) WithPayload(payload *rest_model.Empty) *UpdateEdgeRouterPolicyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update edge router policy o k response
func (o *UpdateEdgeRouterPolicyOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEdgeRouterPolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateEdgeRouterPolicyBadRequestCode is the HTTP code returned for type UpdateEdgeRouterPolicyBadRequest
const UpdateEdgeRouterPolicyBadRequestCode int = 400

/*UpdateEdgeRouterPolicyBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response updateEdgeRouterPolicyBadRequest
*/
type UpdateEdgeRouterPolicyBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateEdgeRouterPolicyBadRequest creates UpdateEdgeRouterPolicyBadRequest with default headers values
func NewUpdateEdgeRouterPolicyBadRequest() *UpdateEdgeRouterPolicyBadRequest {

	return &UpdateEdgeRouterPolicyBadRequest{}
}

// WithPayload adds the payload to the update edge router policy bad request response
func (o *UpdateEdgeRouterPolicyBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateEdgeRouterPolicyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update edge router policy bad request response
func (o *UpdateEdgeRouterPolicyBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEdgeRouterPolicyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateEdgeRouterPolicyUnauthorizedCode is the HTTP code returned for type UpdateEdgeRouterPolicyUnauthorized
const UpdateEdgeRouterPolicyUnauthorizedCode int = 401

/*UpdateEdgeRouterPolicyUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response updateEdgeRouterPolicyUnauthorized
*/
type UpdateEdgeRouterPolicyUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateEdgeRouterPolicyUnauthorized creates UpdateEdgeRouterPolicyUnauthorized with default headers values
func NewUpdateEdgeRouterPolicyUnauthorized() *UpdateEdgeRouterPolicyUnauthorized {

	return &UpdateEdgeRouterPolicyUnauthorized{}
}

// WithPayload adds the payload to the update edge router policy unauthorized response
func (o *UpdateEdgeRouterPolicyUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateEdgeRouterPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update edge router policy unauthorized response
func (o *UpdateEdgeRouterPolicyUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEdgeRouterPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateEdgeRouterPolicyNotFoundCode is the HTTP code returned for type UpdateEdgeRouterPolicyNotFound
const UpdateEdgeRouterPolicyNotFoundCode int = 404

/*UpdateEdgeRouterPolicyNotFound The requested resource does not exist

swagger:response updateEdgeRouterPolicyNotFound
*/
type UpdateEdgeRouterPolicyNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateEdgeRouterPolicyNotFound creates UpdateEdgeRouterPolicyNotFound with default headers values
func NewUpdateEdgeRouterPolicyNotFound() *UpdateEdgeRouterPolicyNotFound {

	return &UpdateEdgeRouterPolicyNotFound{}
}

// WithPayload adds the payload to the update edge router policy not found response
func (o *UpdateEdgeRouterPolicyNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateEdgeRouterPolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update edge router policy not found response
func (o *UpdateEdgeRouterPolicyNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEdgeRouterPolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateEdgeRouterPolicyTooManyRequestsCode is the HTTP code returned for type UpdateEdgeRouterPolicyTooManyRequests
const UpdateEdgeRouterPolicyTooManyRequestsCode int = 429

/*UpdateEdgeRouterPolicyTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response updateEdgeRouterPolicyTooManyRequests
*/
type UpdateEdgeRouterPolicyTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateEdgeRouterPolicyTooManyRequests creates UpdateEdgeRouterPolicyTooManyRequests with default headers values
func NewUpdateEdgeRouterPolicyTooManyRequests() *UpdateEdgeRouterPolicyTooManyRequests {

	return &UpdateEdgeRouterPolicyTooManyRequests{}
}

// WithPayload adds the payload to the update edge router policy too many requests response
func (o *UpdateEdgeRouterPolicyTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateEdgeRouterPolicyTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update edge router policy too many requests response
func (o *UpdateEdgeRouterPolicyTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEdgeRouterPolicyTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateEdgeRouterPolicyServiceUnavailableCode is the HTTP code returned for type UpdateEdgeRouterPolicyServiceUnavailable
const UpdateEdgeRouterPolicyServiceUnavailableCode int = 503

/*UpdateEdgeRouterPolicyServiceUnavailable The request could not be completed due to the server being busy or in a temporarily bad state

swagger:response updateEdgeRouterPolicyServiceUnavailable
*/
type UpdateEdgeRouterPolicyServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewUpdateEdgeRouterPolicyServiceUnavailable creates UpdateEdgeRouterPolicyServiceUnavailable with default headers values
func NewUpdateEdgeRouterPolicyServiceUnavailable() *UpdateEdgeRouterPolicyServiceUnavailable {

	return &UpdateEdgeRouterPolicyServiceUnavailable{}
}

// WithPayload adds the payload to the update edge router policy service unavailable response
func (o *UpdateEdgeRouterPolicyServiceUnavailable) WithPayload(payload *rest_model.APIErrorEnvelope) *UpdateEdgeRouterPolicyServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update edge router policy service unavailable response
func (o *UpdateEdgeRouterPolicyServiceUnavailable) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateEdgeRouterPolicyServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
