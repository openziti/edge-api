// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// DeleteControllerSettingOKCode is the HTTP code returned for type DeleteControllerSettingOK
const DeleteControllerSettingOKCode int = 200

/*DeleteControllerSettingOK The delete request was successful and the resource has been removed

swagger:response deleteControllerSettingOK
*/
type DeleteControllerSettingOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewDeleteControllerSettingOK creates DeleteControllerSettingOK with default headers values
func NewDeleteControllerSettingOK() *DeleteControllerSettingOK {

	return &DeleteControllerSettingOK{}
}

// WithPayload adds the payload to the delete controller setting o k response
func (o *DeleteControllerSettingOK) WithPayload(payload *rest_model.Empty) *DeleteControllerSettingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete controller setting o k response
func (o *DeleteControllerSettingOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteControllerSettingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteControllerSettingBadRequestCode is the HTTP code returned for type DeleteControllerSettingBadRequest
const DeleteControllerSettingBadRequestCode int = 400

/*DeleteControllerSettingBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response deleteControllerSettingBadRequest
*/
type DeleteControllerSettingBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteControllerSettingBadRequest creates DeleteControllerSettingBadRequest with default headers values
func NewDeleteControllerSettingBadRequest() *DeleteControllerSettingBadRequest {

	return &DeleteControllerSettingBadRequest{}
}

// WithPayload adds the payload to the delete controller setting bad request response
func (o *DeleteControllerSettingBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteControllerSettingBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete controller setting bad request response
func (o *DeleteControllerSettingBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteControllerSettingBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteControllerSettingUnauthorizedCode is the HTTP code returned for type DeleteControllerSettingUnauthorized
const DeleteControllerSettingUnauthorizedCode int = 401

/*DeleteControllerSettingUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response deleteControllerSettingUnauthorized
*/
type DeleteControllerSettingUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteControllerSettingUnauthorized creates DeleteControllerSettingUnauthorized with default headers values
func NewDeleteControllerSettingUnauthorized() *DeleteControllerSettingUnauthorized {

	return &DeleteControllerSettingUnauthorized{}
}

// WithPayload adds the payload to the delete controller setting unauthorized response
func (o *DeleteControllerSettingUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteControllerSettingUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete controller setting unauthorized response
func (o *DeleteControllerSettingUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteControllerSettingUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteControllerSettingConflictCode is the HTTP code returned for type DeleteControllerSettingConflict
const DeleteControllerSettingConflictCode int = 409

/*DeleteControllerSettingConflict The resource requested to be removed/altered cannot be as it is referenced by another object.

swagger:response deleteControllerSettingConflict
*/
type DeleteControllerSettingConflict struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteControllerSettingConflict creates DeleteControllerSettingConflict with default headers values
func NewDeleteControllerSettingConflict() *DeleteControllerSettingConflict {

	return &DeleteControllerSettingConflict{}
}

// WithPayload adds the payload to the delete controller setting conflict response
func (o *DeleteControllerSettingConflict) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteControllerSettingConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete controller setting conflict response
func (o *DeleteControllerSettingConflict) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteControllerSettingConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteControllerSettingTooManyRequestsCode is the HTTP code returned for type DeleteControllerSettingTooManyRequests
const DeleteControllerSettingTooManyRequestsCode int = 429

/*DeleteControllerSettingTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response deleteControllerSettingTooManyRequests
*/
type DeleteControllerSettingTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteControllerSettingTooManyRequests creates DeleteControllerSettingTooManyRequests with default headers values
func NewDeleteControllerSettingTooManyRequests() *DeleteControllerSettingTooManyRequests {

	return &DeleteControllerSettingTooManyRequests{}
}

// WithPayload adds the payload to the delete controller setting too many requests response
func (o *DeleteControllerSettingTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteControllerSettingTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete controller setting too many requests response
func (o *DeleteControllerSettingTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteControllerSettingTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
