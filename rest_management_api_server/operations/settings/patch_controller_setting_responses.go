// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openziti/edge-api/rest_model"
)

// PatchControllerSettingOKCode is the HTTP code returned for type PatchControllerSettingOK
const PatchControllerSettingOKCode int = 200

/*PatchControllerSettingOK The patch request was successful and the resource has been altered

swagger:response patchControllerSettingOK
*/
type PatchControllerSettingOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewPatchControllerSettingOK creates PatchControllerSettingOK with default headers values
func NewPatchControllerSettingOK() *PatchControllerSettingOK {

	return &PatchControllerSettingOK{}
}

// WithPayload adds the payload to the patch controller setting o k response
func (o *PatchControllerSettingOK) WithPayload(payload *rest_model.Empty) *PatchControllerSettingOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch controller setting o k response
func (o *PatchControllerSettingOK) SetPayload(payload *rest_model.Empty) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchControllerSettingOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchControllerSettingBadRequestCode is the HTTP code returned for type PatchControllerSettingBadRequest
const PatchControllerSettingBadRequestCode int = 400

/*PatchControllerSettingBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response patchControllerSettingBadRequest
*/
type PatchControllerSettingBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchControllerSettingBadRequest creates PatchControllerSettingBadRequest with default headers values
func NewPatchControllerSettingBadRequest() *PatchControllerSettingBadRequest {

	return &PatchControllerSettingBadRequest{}
}

// WithPayload adds the payload to the patch controller setting bad request response
func (o *PatchControllerSettingBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchControllerSettingBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch controller setting bad request response
func (o *PatchControllerSettingBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchControllerSettingBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchControllerSettingUnauthorizedCode is the HTTP code returned for type PatchControllerSettingUnauthorized
const PatchControllerSettingUnauthorizedCode int = 401

/*PatchControllerSettingUnauthorized The supplied session does not have the correct access rights to request this resource

swagger:response patchControllerSettingUnauthorized
*/
type PatchControllerSettingUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchControllerSettingUnauthorized creates PatchControllerSettingUnauthorized with default headers values
func NewPatchControllerSettingUnauthorized() *PatchControllerSettingUnauthorized {

	return &PatchControllerSettingUnauthorized{}
}

// WithPayload adds the payload to the patch controller setting unauthorized response
func (o *PatchControllerSettingUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchControllerSettingUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch controller setting unauthorized response
func (o *PatchControllerSettingUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchControllerSettingUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchControllerSettingNotFoundCode is the HTTP code returned for type PatchControllerSettingNotFound
const PatchControllerSettingNotFoundCode int = 404

/*PatchControllerSettingNotFound The requested resource does not exist

swagger:response patchControllerSettingNotFound
*/
type PatchControllerSettingNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchControllerSettingNotFound creates PatchControllerSettingNotFound with default headers values
func NewPatchControllerSettingNotFound() *PatchControllerSettingNotFound {

	return &PatchControllerSettingNotFound{}
}

// WithPayload adds the payload to the patch controller setting not found response
func (o *PatchControllerSettingNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchControllerSettingNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch controller setting not found response
func (o *PatchControllerSettingNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchControllerSettingNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchControllerSettingTooManyRequestsCode is the HTTP code returned for type PatchControllerSettingTooManyRequests
const PatchControllerSettingTooManyRequestsCode int = 429

/*PatchControllerSettingTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response patchControllerSettingTooManyRequests
*/
type PatchControllerSettingTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewPatchControllerSettingTooManyRequests creates PatchControllerSettingTooManyRequests with default headers values
func NewPatchControllerSettingTooManyRequests() *PatchControllerSettingTooManyRequests {

	return &PatchControllerSettingTooManyRequests{}
}

// WithPayload adds the payload to the patch controller setting too many requests response
func (o *PatchControllerSettingTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *PatchControllerSettingTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch controller setting too many requests response
func (o *PatchControllerSettingTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchControllerSettingTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
